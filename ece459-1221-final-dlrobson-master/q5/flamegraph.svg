<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1013.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="449"><g><title>perf-exec (6 samples, 1.34%)</title><rect x="0.0000%" y="965" width="1.3363%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="975.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="949" width="1.3363%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="959.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="933" width="1.3363%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="943.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="917" width="1.3363%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="927.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="901" width="1.3363%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="911.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="885" width="1.3363%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="895.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="869" width="1.3363%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="879.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="853" width="1.3363%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="863.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="837" width="1.3363%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="847.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="821" width="1.3363%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="831.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="805" width="1.3363%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="0.0000%" y="789" width="1.3363%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.22%)</title><rect x="1.3363%" y="933" width="0.2227%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="1"/><text x="1.5863%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.22%)</title><rect x="1.3363%" y="917" width="0.2227%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="1"/><text x="1.5863%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.22%)</title><rect x="1.3363%" y="901" width="0.2227%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="1"/><text x="1.5863%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.22%)</title><rect x="1.3363%" y="885" width="0.2227%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="1.5863%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="1.3363%" y="869" width="0.2227%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="1.5863%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="1.3363%" y="853" width="0.2227%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="1.5863%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="1.3363%" y="837" width="0.2227%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="1.5863%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.22%)</title><rect x="1.3363%" y="821" width="0.2227%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="1.5863%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.22%)</title><rect x="1.3363%" y="805" width="0.2227%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="1.5863%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.22%)</title><rect x="1.3363%" y="789" width="0.2227%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="1.5863%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.22%)</title><rect x="1.3363%" y="773" width="0.2227%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="1.5863%" y="783.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.22%)</title><rect x="1.3363%" y="757" width="0.2227%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="1.5863%" y="767.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.22%)</title><rect x="1.3363%" y="741" width="0.2227%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="1.5863%" y="751.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.22%)</title><rect x="1.3363%" y="725" width="0.2227%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="1.5863%" y="735.50"></text></g><g><title>_int_realloc (1 samples, 0.22%)</title><rect x="1.3363%" y="709" width="0.2227%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="1.5863%" y="719.50"></text></g><g><title>_int_malloc (1 samples, 0.22%)</title><rect x="1.3363%" y="693" width="0.2227%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="1.5863%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="1.3363%" y="677" width="0.2227%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="1"/><text x="1.5863%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="1.3363%" y="949" width="0.4454%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="2"/><text x="1.5863%" y="959.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.22%)</title><rect x="1.5590%" y="933" width="0.2227%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="1.8090%" y="943.50"></text></g><g><title>_int_malloc (1 samples, 0.22%)</title><rect x="1.5590%" y="917" width="0.2227%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="1.8090%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="1.5590%" y="901" width="0.2227%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="1"/><text x="1.8090%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.22%)</title><rect x="1.7817%" y="613" width="0.2227%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="2.0317%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.22%)</title><rect x="1.7817%" y="597" width="0.2227%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="1"/><text x="2.0317%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.22%)</title><rect x="1.7817%" y="581" width="0.2227%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="2.0317%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="1.7817%" y="565" width="0.2227%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="2.0317%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.22%)</title><rect x="1.7817%" y="549" width="0.2227%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="1"/><text x="2.0317%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.22%)</title><rect x="1.7817%" y="533" width="0.2227%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="1"/><text x="2.0317%" y="543.50"></text></g><g><title>__GI___libc_free (1 samples, 0.22%)</title><rect x="1.7817%" y="517" width="0.2227%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="2.0317%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 5.12%)</title><rect x="1.7817%" y="693" width="5.1225%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="23"/><text x="2.0317%" y="703.50">&lt;hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (23 samples, 5.12%)</title><rect x="1.7817%" y="677" width="5.1225%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="23"/><text x="2.0317%" y="687.50">hashbr..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (23 samples, 5.12%)</title><rect x="1.7817%" y="661" width="5.1225%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="23"/><text x="2.0317%" y="671.50">hashbr..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (23 samples, 5.12%)</title><rect x="1.7817%" y="645" width="5.1225%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="23"/><text x="2.0317%" y="655.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::vec::Vec&lt;usize&gt;)&gt; (23 samples, 5.12%)</title><rect x="1.7817%" y="629" width="5.1225%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="23"/><text x="2.0317%" y="639.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (22 samples, 4.90%)</title><rect x="2.0045%" y="613" width="4.8998%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="22"/><text x="2.2545%" y="623.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (22 samples, 4.90%)</title><rect x="2.0045%" y="597" width="4.8998%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="22"/><text x="2.2545%" y="607.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 4.90%)</title><rect x="2.0045%" y="581" width="4.8998%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="22"/><text x="2.2545%" y="591.50">&lt;alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 4.90%)</title><rect x="2.0045%" y="565" width="4.8998%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="22"/><text x="2.2545%" y="575.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (22 samples, 4.90%)</title><rect x="2.0045%" y="549" width="4.8998%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="22"/><text x="2.2545%" y="559.50">alloc:..</text></g><g><title>_int_free (22 samples, 4.90%)</title><rect x="2.0045%" y="533" width="4.8998%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="22"/><text x="2.2545%" y="543.50">_int_f..</text></g><g><title>malloc_consolidate (22 samples, 4.90%)</title><rect x="2.0045%" y="517" width="4.8998%" height="15" fill="rgb(250,213,24)" fg:x="9" fg:w="22"/><text x="2.2545%" y="527.50">malloc..</text></g><g><title>unlink_chunk (5 samples, 1.11%)</title><rect x="5.7906%" y="501" width="1.1136%" height="15" fill="rgb(247,123,22)" fg:x="26" fg:w="5"/><text x="6.0406%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (1 samples, 0.22%)</title><rect x="6.9042%" y="693" width="0.2227%" height="15" fill="rgb(231,138,38)" fg:x="31" fg:w="1"/><text x="7.1542%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json::value::JsonValue&gt;&gt; (1 samples, 0.22%)</title><rect x="6.9042%" y="677" width="0.2227%" height="15" fill="rgb(231,145,46)" fg:x="31" fg:w="1"/><text x="7.1542%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="6.9042%" y="661" width="0.2227%" height="15" fill="rgb(251,118,11)" fg:x="31" fg:w="1"/><text x="7.1542%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[json::value::JsonValue]&gt; (1 samples, 0.22%)</title><rect x="6.9042%" y="645" width="0.2227%" height="15" fill="rgb(217,147,25)" fg:x="31" fg:w="1"/><text x="7.1542%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (1 samples, 0.22%)</title><rect x="6.9042%" y="629" width="0.2227%" height="15" fill="rgb(247,81,37)" fg:x="31" fg:w="1"/><text x="7.1542%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;&amp;str,usize&gt;&gt; (1 samples, 0.22%)</title><rect x="7.1269%" y="677" width="0.2227%" height="15" fill="rgb(209,12,38)" fg:x="32" fg:w="1"/><text x="7.3769%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;&amp;str,usize,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.22%)</title><rect x="7.1269%" y="661" width="0.2227%" height="15" fill="rgb(227,1,9)" fg:x="32" fg:w="1"/><text x="7.3769%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(&amp;str,usize)&gt;&gt; (1 samples, 0.22%)</title><rect x="7.1269%" y="645" width="0.2227%" height="15" fill="rgb(248,47,43)" fg:x="32" fg:w="1"/><text x="7.3769%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="7.1269%" y="629" width="0.2227%" height="15" fill="rgb(221,10,30)" fg:x="32" fg:w="1"/><text x="7.3769%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (1 samples, 0.22%)</title><rect x="7.1269%" y="613" width="0.2227%" height="15" fill="rgb(210,229,1)" fg:x="32" fg:w="1"/><text x="7.3769%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (1 samples, 0.22%)</title><rect x="7.1269%" y="597" width="0.2227%" height="15" fill="rgb(222,148,37)" fg:x="32" fg:w="1"/><text x="7.3769%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.22%)</title><rect x="7.1269%" y="581" width="0.2227%" height="15" fill="rgb(234,67,33)" fg:x="32" fg:w="1"/><text x="7.3769%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.22%)</title><rect x="7.1269%" y="565" width="0.2227%" height="15" fill="rgb(247,98,35)" fg:x="32" fg:w="1"/><text x="7.3769%" y="575.50"></text></g><g><title>__GI_munmap (1 samples, 0.22%)</title><rect x="7.1269%" y="549" width="0.2227%" height="15" fill="rgb(247,138,52)" fg:x="32" fg:w="1"/><text x="7.3769%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1269%" y="533" width="0.2227%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="1"/><text x="7.3769%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1269%" y="517" width="0.2227%" height="15" fill="rgb(246,177,23)" fg:x="32" fg:w="1"/><text x="7.3769%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1269%" y="501" width="0.2227%" height="15" fill="rgb(230,62,27)" fg:x="32" fg:w="1"/><text x="7.3769%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1269%" y="485" width="0.2227%" height="15" fill="rgb(216,154,8)" fg:x="32" fg:w="1"/><text x="7.3769%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1269%" y="469" width="0.2227%" height="15" fill="rgb(244,35,45)" fg:x="32" fg:w="1"/><text x="7.3769%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1269%" y="453" width="0.2227%" height="15" fill="rgb(251,115,12)" fg:x="32" fg:w="1"/><text x="7.3769%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1269%" y="437" width="0.2227%" height="15" fill="rgb(240,54,50)" fg:x="32" fg:w="1"/><text x="7.3769%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1269%" y="421" width="0.2227%" height="15" fill="rgb(233,84,52)" fg:x="32" fg:w="1"/><text x="7.3769%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1269%" y="405" width="0.2227%" height="15" fill="rgb(207,117,47)" fg:x="32" fg:w="1"/><text x="7.3769%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1269%" y="389" width="0.2227%" height="15" fill="rgb(249,43,39)" fg:x="32" fg:w="1"/><text x="7.3769%" y="399.50"></text></g><g><title>__GI___libc_free (14 samples, 3.12%)</title><rect x="7.3497%" y="405" width="3.1180%" height="15" fill="rgb(209,38,44)" fg:x="33" fg:w="14"/><text x="7.5997%" y="415.50">__G..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 3.34%)</title><rect x="7.3497%" y="437" width="3.3408%" height="15" fill="rgb(236,212,23)" fg:x="33" fg:w="15"/><text x="7.5997%" y="447.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (15 samples, 3.34%)</title><rect x="7.3497%" y="421" width="3.3408%" height="15" fill="rgb(242,79,21)" fg:x="33" fg:w="15"/><text x="7.5997%" y="431.50">all..</text></g><g><title>_int_free (1 samples, 0.22%)</title><rect x="10.4677%" y="405" width="0.2227%" height="15" fill="rgb(211,96,35)" fg:x="47" fg:w="1"/><text x="10.7177%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;simsearch::SimSearch&lt;&amp;str&gt;&gt; (23 samples, 5.12%)</title><rect x="7.1269%" y="693" width="5.1225%" height="15" fill="rgb(253,215,40)" fg:x="32" fg:w="23"/><text x="7.3769%" y="703.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;usize,alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (22 samples, 4.90%)</title><rect x="7.3497%" y="677" width="4.8998%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="22"/><text x="7.5997%" y="687.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,alloc::vec::Vec&lt;alloc::string::String&gt;,std::collections::hash::map::RandomState&gt;&gt; (22 samples, 4.90%)</title><rect x="7.3497%" y="661" width="4.8998%" height="15" fill="rgb(208,190,38)" fg:x="33" fg:w="22"/><text x="7.5997%" y="671.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,alloc::vec::Vec&lt;alloc::string::String&gt;)&gt;&gt; (22 samples, 4.90%)</title><rect x="7.3497%" y="645" width="4.8998%" height="15" fill="rgb(235,213,38)" fg:x="33" fg:w="22"/><text x="7.5997%" y="655.50">core::..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 4.90%)</title><rect x="7.3497%" y="629" width="4.8998%" height="15" fill="rgb(237,122,38)" fg:x="33" fg:w="22"/><text x="7.5997%" y="639.50">&lt;hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (22 samples, 4.90%)</title><rect x="7.3497%" y="613" width="4.8998%" height="15" fill="rgb(244,218,35)" fg:x="33" fg:w="22"/><text x="7.5997%" y="623.50">hashbr..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (22 samples, 4.90%)</title><rect x="7.3497%" y="597" width="4.8998%" height="15" fill="rgb(240,68,47)" fg:x="33" fg:w="22"/><text x="7.5997%" y="607.50">hashbr..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (22 samples, 4.90%)</title><rect x="7.3497%" y="581" width="4.8998%" height="15" fill="rgb(210,16,53)" fg:x="33" fg:w="22"/><text x="7.5997%" y="591.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;(usize,alloc::vec::Vec&lt;alloc::string::String&gt;)&gt; (22 samples, 4.90%)</title><rect x="7.3497%" y="565" width="4.8998%" height="15" fill="rgb(235,124,12)" fg:x="33" fg:w="22"/><text x="7.5997%" y="575.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (22 samples, 4.90%)</title><rect x="7.3497%" y="549" width="4.8998%" height="15" fill="rgb(224,169,11)" fg:x="33" fg:w="22"/><text x="7.5997%" y="559.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 4.90%)</title><rect x="7.3497%" y="533" width="4.8998%" height="15" fill="rgb(250,166,2)" fg:x="33" fg:w="22"/><text x="7.5997%" y="543.50">&lt;alloc..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (22 samples, 4.90%)</title><rect x="7.3497%" y="517" width="4.8998%" height="15" fill="rgb(242,216,29)" fg:x="33" fg:w="22"/><text x="7.5997%" y="527.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (22 samples, 4.90%)</title><rect x="7.3497%" y="501" width="4.8998%" height="15" fill="rgb(230,116,27)" fg:x="33" fg:w="22"/><text x="7.5997%" y="511.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (22 samples, 4.90%)</title><rect x="7.3497%" y="485" width="4.8998%" height="15" fill="rgb(228,99,48)" fg:x="33" fg:w="22"/><text x="7.5997%" y="495.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (22 samples, 4.90%)</title><rect x="7.3497%" y="469" width="4.8998%" height="15" fill="rgb(253,11,6)" fg:x="33" fg:w="22"/><text x="7.5997%" y="479.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 4.90%)</title><rect x="7.3497%" y="453" width="4.8998%" height="15" fill="rgb(247,143,39)" fg:x="33" fg:w="22"/><text x="7.5997%" y="463.50">&lt;alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 1.56%)</title><rect x="10.6904%" y="437" width="1.5590%" height="15" fill="rgb(236,97,10)" fg:x="48" fg:w="7"/><text x="10.9404%" y="447.50"></text></g><g><title>json::parser::parse (1 samples, 0.22%)</title><rect x="12.2494%" y="693" width="0.2227%" height="15" fill="rgb(233,208,19)" fg:x="55" fg:w="1"/><text x="12.4994%" y="703.50"></text></g><g><title>json::parser::Parser::parse (1 samples, 0.22%)</title><rect x="12.2494%" y="677" width="0.2227%" height="15" fill="rgb(216,164,2)" fg:x="55" fg:w="1"/><text x="12.4994%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.45%)</title><rect x="12.6949%" y="517" width="0.4454%" height="15" fill="rgb(220,129,5)" fg:x="57" fg:w="2"/><text x="12.9449%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.45%)</title><rect x="12.6949%" y="501" width="0.4454%" height="15" fill="rgb(242,17,10)" fg:x="57" fg:w="2"/><text x="12.9449%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.45%)</title><rect x="12.6949%" y="485" width="0.4454%" height="15" fill="rgb(242,107,0)" fg:x="57" fg:w="2"/><text x="12.9449%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.45%)</title><rect x="12.6949%" y="469" width="0.4454%" height="15" fill="rgb(251,28,31)" fg:x="57" fg:w="2"/><text x="12.9449%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.45%)</title><rect x="12.6949%" y="453" width="0.4454%" height="15" fill="rgb(233,223,10)" fg:x="57" fg:w="2"/><text x="12.9449%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.45%)</title><rect x="12.6949%" y="437" width="0.4454%" height="15" fill="rgb(215,21,27)" fg:x="57" fg:w="2"/><text x="12.9449%" y="447.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.45%)</title><rect x="12.6949%" y="421" width="0.4454%" height="15" fill="rgb(232,23,21)" fg:x="57" fg:w="2"/><text x="12.9449%" y="431.50"></text></g><g><title>_int_malloc (2 samples, 0.45%)</title><rect x="12.6949%" y="405" width="0.4454%" height="15" fill="rgb(244,5,23)" fg:x="57" fg:w="2"/><text x="12.9449%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.9176%" y="389" width="0.2227%" height="15" fill="rgb(226,81,46)" fg:x="58" fg:w="1"/><text x="13.1676%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.9176%" y="373" width="0.2227%" height="15" fill="rgb(247,70,30)" fg:x="58" fg:w="1"/><text x="13.1676%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.9176%" y="357" width="0.2227%" height="15" fill="rgb(212,68,19)" fg:x="58" fg:w="1"/><text x="13.1676%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.9176%" y="341" width="0.2227%" height="15" fill="rgb(240,187,13)" fg:x="58" fg:w="1"/><text x="13.1676%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.9176%" y="325" width="0.2227%" height="15" fill="rgb(223,113,26)" fg:x="58" fg:w="1"/><text x="13.1676%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.9176%" y="309" width="0.2227%" height="15" fill="rgb(206,192,2)" fg:x="58" fg:w="1"/><text x="13.1676%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.9176%" y="293" width="0.2227%" height="15" fill="rgb(241,108,4)" fg:x="58" fg:w="1"/><text x="13.1676%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.9176%" y="277" width="0.2227%" height="15" fill="rgb(247,173,49)" fg:x="58" fg:w="1"/><text x="13.1676%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 1.11%)</title><rect x="12.4722%" y="597" width="1.1136%" height="15" fill="rgb(224,114,35)" fg:x="56" fg:w="5"/><text x="12.7222%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.89%)</title><rect x="12.6949%" y="581" width="0.8909%" height="15" fill="rgb(245,159,27)" fg:x="57" fg:w="4"/><text x="12.9449%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.89%)</title><rect x="12.6949%" y="565" width="0.8909%" height="15" fill="rgb(245,172,44)" fg:x="57" fg:w="4"/><text x="12.9449%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.89%)</title><rect x="12.6949%" y="549" width="0.8909%" height="15" fill="rgb(236,23,11)" fg:x="57" fg:w="4"/><text x="12.9449%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.89%)</title><rect x="12.6949%" y="533" width="0.8909%" height="15" fill="rgb(205,117,38)" fg:x="57" fg:w="4"/><text x="12.9449%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.45%)</title><rect x="13.1403%" y="517" width="0.4454%" height="15" fill="rgb(237,72,25)" fg:x="59" fg:w="2"/><text x="13.3903%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.45%)</title><rect x="13.1403%" y="501" width="0.4454%" height="15" fill="rgb(244,70,9)" fg:x="59" fg:w="2"/><text x="13.3903%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.45%)</title><rect x="13.1403%" y="485" width="0.4454%" height="15" fill="rgb(217,125,39)" fg:x="59" fg:w="2"/><text x="13.3903%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 1.78%)</title><rect x="12.4722%" y="661" width="1.7817%" height="15" fill="rgb(235,36,10)" fg:x="56" fg:w="8"/><text x="12.7222%" y="671.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 1.78%)</title><rect x="12.4722%" y="645" width="1.7817%" height="15" fill="rgb(251,123,47)" fg:x="56" fg:w="8"/><text x="12.7222%" y="655.50">a..</text></g><g><title>alloc::slice::hack::to_vec (8 samples, 1.78%)</title><rect x="12.4722%" y="629" width="1.7817%" height="15" fill="rgb(221,13,13)" fg:x="56" fg:w="8"/><text x="12.7222%" y="639.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 1.78%)</title><rect x="12.4722%" y="613" width="1.7817%" height="15" fill="rgb(238,131,9)" fg:x="56" fg:w="8"/><text x="12.7222%" y="623.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3 samples, 0.67%)</title><rect x="13.5857%" y="597" width="0.6682%" height="15" fill="rgb(211,50,8)" fg:x="61" fg:w="3"/><text x="13.8357%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort::{{closure}} (4 samples, 0.89%)</title><rect x="14.9220%" y="613" width="0.8909%" height="15" fill="rgb(245,182,24)" fg:x="67" fg:w="4"/><text x="15.1720%" y="623.50"></text></g><g><title>core::cmp::PartialOrd::lt (4 samples, 0.89%)</title><rect x="14.9220%" y="597" width="0.8909%" height="15" fill="rgb(242,14,37)" fg:x="67" fg:w="4"/><text x="15.1720%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.89%)</title><rect x="14.9220%" y="581" width="0.8909%" height="15" fill="rgb(246,228,12)" fg:x="67" fg:w="4"/><text x="15.1720%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.89%)</title><rect x="14.9220%" y="565" width="0.8909%" height="15" fill="rgb(213,55,15)" fg:x="67" fg:w="4"/><text x="15.1720%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialOrd for [T]&gt;::partial_cmp (4 samples, 0.89%)</title><rect x="14.9220%" y="549" width="0.8909%" height="15" fill="rgb(209,9,3)" fg:x="67" fg:w="4"/><text x="15.1720%" y="559.50"></text></g><g><title>&lt;A as core::slice::cmp::SlicePartialOrd&gt;::partial_compare (4 samples, 0.89%)</title><rect x="14.9220%" y="533" width="0.8909%" height="15" fill="rgb(230,59,30)" fg:x="67" fg:w="4"/><text x="15.1720%" y="543.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (4 samples, 0.89%)</title><rect x="14.9220%" y="517" width="0.8909%" height="15" fill="rgb(209,121,21)" fg:x="67" fg:w="4"/><text x="15.1720%" y="527.50"></text></g><g><title>__memcmp_avx2_movbe (4 samples, 0.89%)</title><rect x="14.9220%" y="501" width="0.8909%" height="15" fill="rgb(220,109,13)" fg:x="67" fg:w="4"/><text x="15.1720%" y="511.50"></text></g><g><title>alloc::slice::insert_head (8 samples, 1.78%)</title><rect x="14.2539%" y="629" width="1.7817%" height="15" fill="rgb(232,18,1)" fg:x="64" fg:w="8"/><text x="14.5039%" y="639.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::slice::insert_head::InsertionHole&lt;alloc::string::String&gt;&gt; (1 samples, 0.22%)</title><rect x="15.8129%" y="613" width="0.2227%" height="15" fill="rgb(215,41,42)" fg:x="71" fg:w="1"/><text x="16.0629%" y="623.50"></text></g><g><title>&lt;alloc::slice::insert_head::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="15.8129%" y="597" width="0.2227%" height="15" fill="rgb(224,123,36)" fg:x="71" fg:w="1"/><text x="16.0629%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.22%)</title><rect x="15.8129%" y="581" width="0.2227%" height="15" fill="rgb(240,125,3)" fg:x="71" fg:w="1"/><text x="16.0629%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort (10 samples, 2.23%)</title><rect x="14.2539%" y="661" width="2.2272%" height="15" fill="rgb(205,98,50)" fg:x="64" fg:w="10"/><text x="14.5039%" y="671.50">a..</text></g><g><title>alloc::slice::merge_sort (10 samples, 2.23%)</title><rect x="14.2539%" y="645" width="2.2272%" height="15" fill="rgb(205,185,37)" fg:x="64" fg:w="10"/><text x="14.5039%" y="655.50">a..</text></g><g><title>alloc::slice::merge (2 samples, 0.45%)</title><rect x="16.0356%" y="629" width="0.4454%" height="15" fill="rgb(238,207,15)" fg:x="72" fg:w="2"/><text x="16.2856%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort::{{closure}} (2 samples, 0.45%)</title><rect x="16.0356%" y="613" width="0.4454%" height="15" fill="rgb(213,199,42)" fg:x="72" fg:w="2"/><text x="16.2856%" y="623.50"></text></g><g><title>core::cmp::PartialOrd::lt (2 samples, 0.45%)</title><rect x="16.0356%" y="597" width="0.4454%" height="15" fill="rgb(235,201,11)" fg:x="72" fg:w="2"/><text x="16.2856%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialOrd&gt;::partial_cmp (2 samples, 0.45%)</title><rect x="16.0356%" y="581" width="0.4454%" height="15" fill="rgb(207,46,11)" fg:x="72" fg:w="2"/><text x="16.2856%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::PartialOrd&gt;::partial_cmp (2 samples, 0.45%)</title><rect x="16.0356%" y="565" width="0.4454%" height="15" fill="rgb(241,35,35)" fg:x="72" fg:w="2"/><text x="16.2856%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialOrd for [T]&gt;::partial_cmp (2 samples, 0.45%)</title><rect x="16.0356%" y="549" width="0.4454%" height="15" fill="rgb(243,32,47)" fg:x="72" fg:w="2"/><text x="16.2856%" y="559.50"></text></g><g><title>&lt;A as core::slice::cmp::SlicePartialOrd&gt;::partial_compare (2 samples, 0.45%)</title><rect x="16.0356%" y="533" width="0.4454%" height="15" fill="rgb(247,202,23)" fg:x="72" fg:w="2"/><text x="16.2856%" y="543.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (2 samples, 0.45%)</title><rect x="16.0356%" y="517" width="0.4454%" height="15" fill="rgb(219,102,11)" fg:x="72" fg:w="2"/><text x="16.2856%" y="527.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.22%)</title><rect x="16.2584%" y="501" width="0.2227%" height="15" fill="rgb(243,110,44)" fg:x="73" fg:w="1"/><text x="16.5084%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup::{{closure}} (1 samples, 0.22%)</title><rect x="16.4811%" y="629" width="0.2227%" height="15" fill="rgb(222,74,54)" fg:x="74" fg:w="1"/><text x="16.7311%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;mut B&gt; for &amp;mut A&gt;::eq (1 samples, 0.22%)</title><rect x="16.4811%" y="613" width="0.2227%" height="15" fill="rgb(216,99,12)" fg:x="74" fg:w="1"/><text x="16.7311%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.22%)</title><rect x="16.4811%" y="597" width="0.2227%" height="15" fill="rgb(226,22,26)" fg:x="74" fg:w="1"/><text x="16.7311%" y="607.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.22%)</title><rect x="16.4811%" y="581" width="0.2227%" height="15" fill="rgb(217,163,10)" fg:x="74" fg:w="1"/><text x="16.7311%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.22%)</title><rect x="16.4811%" y="565" width="0.2227%" height="15" fill="rgb(213,25,53)" fg:x="74" fg:w="1"/><text x="16.7311%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.22%)</title><rect x="16.4811%" y="549" width="0.2227%" height="15" fill="rgb(252,105,26)" fg:x="74" fg:w="1"/><text x="16.7311%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.22%)</title><rect x="16.4811%" y="533" width="0.2227%" height="15" fill="rgb(220,39,43)" fg:x="74" fg:w="1"/><text x="16.7311%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup (2 samples, 0.45%)</title><rect x="16.4811%" y="661" width="0.4454%" height="15" fill="rgb(229,68,48)" fg:x="74" fg:w="2"/><text x="16.7311%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup_by (2 samples, 0.45%)</title><rect x="16.4811%" y="645" width="0.4454%" height="15" fill="rgb(252,8,32)" fg:x="74" fg:w="2"/><text x="16.7311%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.22%)</title><rect x="16.7038%" y="629" width="0.2227%" height="15" fill="rgb(223,20,43)" fg:x="75" fg:w="1"/><text x="16.9538%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.45%)</title><rect x="17.8174%" y="485" width="0.4454%" height="15" fill="rgb(229,81,49)" fg:x="80" fg:w="2"/><text x="18.0674%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.0401%" y="469" width="0.2227%" height="15" fill="rgb(236,28,36)" fg:x="81" fg:w="1"/><text x="18.2901%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.0401%" y="453" width="0.2227%" height="15" fill="rgb(249,185,26)" fg:x="81" fg:w="1"/><text x="18.2901%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.0401%" y="437" width="0.2227%" height="15" fill="rgb(249,174,33)" fg:x="81" fg:w="1"/><text x="18.2901%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.0401%" y="421" width="0.2227%" height="15" fill="rgb(233,201,37)" fg:x="81" fg:w="1"/><text x="18.2901%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 1.56%)</title><rect x="17.1492%" y="645" width="1.5590%" height="15" fill="rgb(221,78,26)" fg:x="77" fg:w="7"/><text x="17.3992%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 1.56%)</title><rect x="17.1492%" y="629" width="1.5590%" height="15" fill="rgb(250,127,30)" fg:x="77" fg:w="7"/><text x="17.3992%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 1.56%)</title><rect x="17.1492%" y="613" width="1.5590%" height="15" fill="rgb(230,49,44)" fg:x="77" fg:w="7"/><text x="17.3992%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 1.56%)</title><rect x="17.1492%" y="597" width="1.5590%" height="15" fill="rgb(229,67,23)" fg:x="77" fg:w="7"/><text x="17.3992%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 1.56%)</title><rect x="17.1492%" y="581" width="1.5590%" height="15" fill="rgb(249,83,47)" fg:x="77" fg:w="7"/><text x="17.3992%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 1.34%)</title><rect x="17.3719%" y="565" width="1.3363%" height="15" fill="rgb(215,43,3)" fg:x="78" fg:w="6"/><text x="17.6219%" y="575.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 1.34%)</title><rect x="17.3719%" y="549" width="1.3363%" height="15" fill="rgb(238,154,13)" fg:x="78" fg:w="6"/><text x="17.6219%" y="559.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 1.34%)</title><rect x="17.3719%" y="533" width="1.3363%" height="15" fill="rgb(219,56,2)" fg:x="78" fg:w="6"/><text x="17.6219%" y="543.50"></text></g><g><title>__GI___libc_realloc (6 samples, 1.34%)</title><rect x="17.3719%" y="517" width="1.3363%" height="15" fill="rgb(233,0,4)" fg:x="78" fg:w="6"/><text x="17.6219%" y="527.50"></text></g><g><title>_int_realloc (5 samples, 1.11%)</title><rect x="17.5947%" y="501" width="1.1136%" height="15" fill="rgb(235,30,7)" fg:x="79" fg:w="5"/><text x="17.8447%" y="511.50"></text></g><g><title>_int_malloc (2 samples, 0.45%)</title><rect x="18.2628%" y="485" width="0.4454%" height="15" fill="rgb(250,79,13)" fg:x="82" fg:w="2"/><text x="18.5128%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="18.2628%" y="469" width="0.4454%" height="15" fill="rgb(211,146,34)" fg:x="82" fg:w="2"/><text x="18.5128%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.4855%" y="453" width="0.2227%" height="15" fill="rgb(228,22,38)" fg:x="83" fg:w="1"/><text x="18.7355%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.4855%" y="437" width="0.2227%" height="15" fill="rgb(235,168,5)" fg:x="83" fg:w="1"/><text x="18.7355%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.4855%" y="421" width="0.2227%" height="15" fill="rgb(221,155,16)" fg:x="83" fg:w="1"/><text x="18.7355%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.4855%" y="405" width="0.2227%" height="15" fill="rgb(215,215,53)" fg:x="83" fg:w="1"/><text x="18.7355%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.4855%" y="389" width="0.2227%" height="15" fill="rgb(223,4,10)" fg:x="83" fg:w="1"/><text x="18.7355%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.4855%" y="373" width="0.2227%" height="15" fill="rgb(234,103,6)" fg:x="83" fg:w="1"/><text x="18.7355%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.4855%" y="357" width="0.2227%" height="15" fill="rgb(227,97,0)" fg:x="83" fg:w="1"/><text x="18.7355%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.4855%" y="341" width="0.2227%" height="15" fill="rgb(234,150,53)" fg:x="83" fg:w="1"/><text x="18.7355%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.4855%" y="325" width="0.2227%" height="15" fill="rgb(228,201,54)" fg:x="83" fg:w="1"/><text x="18.7355%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 2.23%)</title><rect x="16.9265%" y="661" width="2.2272%" height="15" fill="rgb(222,22,37)" fg:x="76" fg:w="10"/><text x="17.1765%" y="671.50">a..</text></g><g><title>core::ptr::write (2 samples, 0.45%)</title><rect x="18.7082%" y="645" width="0.4454%" height="15" fill="rgb(237,53,32)" fg:x="84" fg:w="2"/><text x="18.9582%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="629" width="0.2227%" height="15" fill="rgb(233,25,53)" fg:x="85" fg:w="1"/><text x="19.1810%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="613" width="0.2227%" height="15" fill="rgb(210,40,34)" fg:x="85" fg:w="1"/><text x="19.1810%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="597" width="0.2227%" height="15" fill="rgb(241,220,44)" fg:x="85" fg:w="1"/><text x="19.1810%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="581" width="0.2227%" height="15" fill="rgb(235,28,35)" fg:x="85" fg:w="1"/><text x="19.1810%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="565" width="0.2227%" height="15" fill="rgb(210,56,17)" fg:x="85" fg:w="1"/><text x="19.1810%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="549" width="0.2227%" height="15" fill="rgb(224,130,29)" fg:x="85" fg:w="1"/><text x="19.1810%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="533" width="0.2227%" height="15" fill="rgb(235,212,8)" fg:x="85" fg:w="1"/><text x="19.1810%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="517" width="0.2227%" height="15" fill="rgb(223,33,50)" fg:x="85" fg:w="1"/><text x="19.1810%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="501" width="0.2227%" height="15" fill="rgb(219,149,13)" fg:x="85" fg:w="1"/><text x="19.1810%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="485" width="0.2227%" height="15" fill="rgb(250,156,29)" fg:x="85" fg:w="1"/><text x="19.1810%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="18.9310%" y="469" width="0.2227%" height="15" fill="rgb(216,193,19)" fg:x="85" fg:w="1"/><text x="19.1810%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.67%)</title><rect x="22.2717%" y="613" width="0.6682%" height="15" fill="rgb(216,135,14)" fg:x="100" fg:w="3"/><text x="22.5217%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (18 samples, 4.01%)</title><rect x="19.1537%" y="645" width="4.0089%" height="15" fill="rgb(241,47,5)" fg:x="86" fg:w="18"/><text x="19.4037%" y="655.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::process_one (15 samples, 3.34%)</title><rect x="19.8218%" y="629" width="3.3408%" height="15" fill="rgb(233,42,35)" fg:x="89" fg:w="15"/><text x="20.0718%" y="639.50">all..</text></g><g><title>simsearch::SimSearch&lt;Id&gt;::delete::{{closure}} (1 samples, 0.22%)</title><rect x="22.9399%" y="613" width="0.2227%" height="15" fill="rgb(231,13,6)" fg:x="103" fg:w="1"/><text x="23.1899%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (1 samples, 0.22%)</title><rect x="22.9399%" y="597" width="0.2227%" height="15" fill="rgb(207,181,40)" fg:x="103" fg:w="1"/><text x="23.1899%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (1 samples, 0.22%)</title><rect x="22.9399%" y="581" width="0.2227%" height="15" fill="rgb(254,173,49)" fg:x="103" fg:w="1"/><text x="23.1899%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.22%)</title><rect x="23.1626%" y="517" width="0.2227%" height="15" fill="rgb(221,1,38)" fg:x="104" fg:w="1"/><text x="23.4126%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.22%)</title><rect x="23.1626%" y="501" width="0.2227%" height="15" fill="rgb(206,124,46)" fg:x="104" fg:w="1"/><text x="23.4126%" y="511.50"></text></g><g><title>_int_free (1 samples, 0.22%)</title><rect x="23.1626%" y="485" width="0.2227%" height="15" fill="rgb(249,21,11)" fg:x="104" fg:w="1"/><text x="23.4126%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (2 samples, 0.45%)</title><rect x="23.1626%" y="645" width="0.4454%" height="15" fill="rgb(222,201,40)" fg:x="104" fg:w="2"/><text x="23.4126%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (2 samples, 0.45%)</title><rect x="23.1626%" y="629" width="0.4454%" height="15" fill="rgb(235,61,29)" fg:x="104" fg:w="2"/><text x="23.4126%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.45%)</title><rect x="23.1626%" y="613" width="0.4454%" height="15" fill="rgb(219,207,3)" fg:x="104" fg:w="2"/><text x="23.4126%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (2 samples, 0.45%)</title><rect x="23.1626%" y="597" width="0.4454%" height="15" fill="rgb(222,56,46)" fg:x="104" fg:w="2"/><text x="23.4126%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.45%)</title><rect x="23.1626%" y="581" width="0.4454%" height="15" fill="rgb(239,76,54)" fg:x="104" fg:w="2"/><text x="23.4126%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.45%)</title><rect x="23.1626%" y="565" width="0.4454%" height="15" fill="rgb(231,124,27)" fg:x="104" fg:w="2"/><text x="23.4126%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.45%)</title><rect x="23.1626%" y="549" width="0.4454%" height="15" fill="rgb(249,195,6)" fg:x="104" fg:w="2"/><text x="23.4126%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.45%)</title><rect x="23.1626%" y="533" width="0.4454%" height="15" fill="rgb(237,174,47)" fg:x="104" fg:w="2"/><text x="23.4126%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.22%)</title><rect x="23.3853%" y="517" width="0.2227%" height="15" fill="rgb(206,201,31)" fg:x="105" fg:w="1"/><text x="23.6353%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.45%)</title><rect x="23.8307%" y="501" width="0.4454%" height="15" fill="rgb(231,57,52)" fg:x="107" fg:w="2"/><text x="24.0807%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.89%)</title><rect x="23.6080%" y="597" width="0.8909%" height="15" fill="rgb(248,177,22)" fg:x="106" fg:w="4"/><text x="23.8580%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.89%)</title><rect x="23.6080%" y="581" width="0.8909%" height="15" fill="rgb(215,211,37)" fg:x="106" fg:w="4"/><text x="23.8580%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 0.89%)</title><rect x="23.6080%" y="565" width="0.8909%" height="15" fill="rgb(241,128,51)" fg:x="106" fg:w="4"/><text x="23.8580%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.89%)</title><rect x="23.6080%" y="549" width="0.8909%" height="15" fill="rgb(227,165,31)" fg:x="106" fg:w="4"/><text x="23.8580%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.89%)</title><rect x="23.6080%" y="533" width="0.8909%" height="15" fill="rgb(228,167,24)" fg:x="106" fg:w="4"/><text x="23.8580%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.89%)</title><rect x="23.6080%" y="517" width="0.8909%" height="15" fill="rgb(228,143,12)" fg:x="106" fg:w="4"/><text x="23.8580%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.22%)</title><rect x="24.2762%" y="501" width="0.2227%" height="15" fill="rgb(249,149,8)" fg:x="109" fg:w="1"/><text x="24.5262%" y="511.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.22%)</title><rect x="24.4989%" y="565" width="0.2227%" height="15" fill="rgb(243,35,44)" fg:x="110" fg:w="1"/><text x="24.7489%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.22%)</title><rect x="24.4989%" y="549" width="0.2227%" height="15" fill="rgb(246,89,9)" fg:x="110" fg:w="1"/><text x="24.7489%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.22%)</title><rect x="24.4989%" y="533" width="0.2227%" height="15" fill="rgb(233,213,13)" fg:x="110" fg:w="1"/><text x="24.7489%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.22%)</title><rect x="24.4989%" y="517" width="0.2227%" height="15" fill="rgb(233,141,41)" fg:x="110" fg:w="1"/><text x="24.7489%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.22%)</title><rect x="24.4989%" y="501" width="0.2227%" height="15" fill="rgb(239,167,4)" fg:x="110" fg:w="1"/><text x="24.7489%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.22%)</title><rect x="24.4989%" y="485" width="0.2227%" height="15" fill="rgb(209,217,16)" fg:x="110" fg:w="1"/><text x="24.7489%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6 samples, 1.34%)</title><rect x="23.6080%" y="645" width="1.3363%" height="15" fill="rgb(219,88,35)" fg:x="106" fg:w="6"/><text x="23.8580%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6 samples, 1.34%)</title><rect x="23.6080%" y="629" width="1.3363%" height="15" fill="rgb(220,193,23)" fg:x="106" fg:w="6"/><text x="23.8580%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 1.34%)</title><rect x="23.6080%" y="613" width="1.3363%" height="15" fill="rgb(230,90,52)" fg:x="106" fg:w="6"/><text x="23.8580%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.45%)</title><rect x="24.4989%" y="597" width="0.4454%" height="15" fill="rgb(252,106,19)" fg:x="110" fg:w="2"/><text x="24.7489%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.45%)</title><rect x="24.4989%" y="581" width="0.4454%" height="15" fill="rgb(206,74,20)" fg:x="110" fg:w="2"/><text x="24.7489%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (1 samples, 0.22%)</title><rect x="24.7216%" y="565" width="0.2227%" height="15" fill="rgb(230,138,44)" fg:x="111" fg:w="1"/><text x="24.9716%" y="575.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (1 samples, 0.22%)</title><rect x="24.7216%" y="549" width="0.2227%" height="15" fill="rgb(235,182,43)" fg:x="111" fg:w="1"/><text x="24.9716%" y="559.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (1 samples, 0.22%)</title><rect x="24.7216%" y="533" width="0.2227%" height="15" fill="rgb(242,16,51)" fg:x="111" fg:w="1"/><text x="24.9716%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.22%)</title><rect x="24.7216%" y="517" width="0.2227%" height="15" fill="rgb(248,9,4)" fg:x="111" fg:w="1"/><text x="24.9716%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.22%)</title><rect x="24.7216%" y="501" width="0.2227%" height="15" fill="rgb(210,31,22)" fg:x="111" fg:w="1"/><text x="24.9716%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.22%)</title><rect x="24.7216%" y="485" width="0.2227%" height="15" fill="rgb(239,54,39)" fg:x="111" fg:w="1"/><text x="24.9716%" y="495.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.22%)</title><rect x="24.7216%" y="469" width="0.2227%" height="15" fill="rgb(230,99,41)" fg:x="111" fg:w="1"/><text x="24.9716%" y="479.50"></text></g><g><title>simsearch::SimSearch&lt;Id&gt;::delete (27 samples, 6.01%)</title><rect x="19.1537%" y="661" width="6.0134%" height="15" fill="rgb(253,106,12)" fg:x="86" fg:w="27"/><text x="19.4037%" y="671.50">simsearc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.22%)</title><rect x="24.9443%" y="645" width="0.2227%" height="15" fill="rgb(213,46,41)" fg:x="112" fg:w="1"/><text x="25.1943%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.22%)</title><rect x="24.9443%" y="629" width="0.2227%" height="15" fill="rgb(215,133,35)" fg:x="112" fg:w="1"/><text x="25.1943%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.22%)</title><rect x="24.9443%" y="613" width="0.2227%" height="15" fill="rgb(213,28,5)" fg:x="112" fg:w="1"/><text x="25.1943%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.22%)</title><rect x="24.9443%" y="597" width="0.2227%" height="15" fill="rgb(215,77,49)" fg:x="112" fg:w="1"/><text x="25.1943%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.22%)</title><rect x="24.9443%" y="581" width="0.2227%" height="15" fill="rgb(248,100,22)" fg:x="112" fg:w="1"/><text x="25.1943%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.22%)</title><rect x="24.9443%" y="565" width="0.2227%" height="15" fill="rgb(208,67,9)" fg:x="112" fg:w="1"/><text x="25.1943%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="24.9443%" y="549" width="0.2227%" height="15" fill="rgb(219,133,21)" fg:x="112" fg:w="1"/><text x="25.1943%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="24.9443%" y="533" width="0.2227%" height="15" fill="rgb(246,46,29)" fg:x="112" fg:w="1"/><text x="25.1943%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="24.9443%" y="517" width="0.2227%" height="15" fill="rgb(246,185,52)" fg:x="112" fg:w="1"/><text x="25.1943%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.22%)</title><rect x="24.9443%" y="501" width="0.2227%" height="15" fill="rgb(252,136,11)" fg:x="112" fg:w="1"/><text x="25.1943%" y="511.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="25.3898%" y="437" width="0.2227%" height="15" fill="rgb(219,138,53)" fg:x="114" fg:w="1"/><text x="25.6398%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.22%)</title><rect x="25.3898%" y="421" width="0.2227%" height="15" fill="rgb(211,51,23)" fg:x="114" fg:w="1"/><text x="25.6398%" y="431.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.22%)</title><rect x="25.3898%" y="405" width="0.2227%" height="15" fill="rgb(247,221,28)" fg:x="114" fg:w="1"/><text x="25.6398%" y="415.50"></text></g><g><title>core::str::pattern::Searcher::next_match (1 samples, 0.22%)</title><rect x="25.3898%" y="389" width="0.2227%" height="15" fill="rgb(251,222,45)" fg:x="114" fg:w="1"/><text x="25.6398%" y="399.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.22%)</title><rect x="25.3898%" y="373" width="0.2227%" height="15" fill="rgb(217,162,53)" fg:x="114" fg:w="1"/><text x="25.6398%" y="383.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="25.3898%" y="357" width="0.2227%" height="15" fill="rgb(229,93,14)" fg:x="114" fg:w="1"/><text x="25.6398%" y="367.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="25.3898%" y="341" width="0.2227%" height="15" fill="rgb(209,67,49)" fg:x="114" fg:w="1"/><text x="25.6398%" y="351.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.22%)</title><rect x="25.3898%" y="325" width="0.2227%" height="15" fill="rgb(213,87,29)" fg:x="114" fg:w="1"/><text x="25.6398%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="25.3898%" y="309" width="0.2227%" height="15" fill="rgb(205,151,52)" fg:x="114" fg:w="1"/><text x="25.6398%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.45%)</title><rect x="25.3898%" y="533" width="0.4454%" height="15" fill="rgb(253,215,39)" fg:x="114" fg:w="2"/><text x="25.6398%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.45%)</title><rect x="25.3898%" y="517" width="0.4454%" height="15" fill="rgb(221,220,41)" fg:x="114" fg:w="2"/><text x="25.6398%" y="527.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.45%)</title><rect x="25.3898%" y="501" width="0.4454%" height="15" fill="rgb(218,133,21)" fg:x="114" fg:w="2"/><text x="25.6398%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.45%)</title><rect x="25.3898%" y="485" width="0.4454%" height="15" fill="rgb(221,193,43)" fg:x="114" fg:w="2"/><text x="25.6398%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.45%)</title><rect x="25.3898%" y="469" width="0.4454%" height="15" fill="rgb(240,128,52)" fg:x="114" fg:w="2"/><text x="25.6398%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.45%)</title><rect x="25.3898%" y="453" width="0.4454%" height="15" fill="rgb(253,114,12)" fg:x="114" fg:w="2"/><text x="25.6398%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1 samples, 0.22%)</title><rect x="25.6125%" y="437" width="0.2227%" height="15" fill="rgb(215,223,47)" fg:x="115" fg:w="1"/><text x="25.8625%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.22%)</title><rect x="25.6125%" y="421" width="0.2227%" height="15" fill="rgb(248,225,23)" fg:x="115" fg:w="1"/><text x="25.8625%" y="431.50"></text></g><g><title>&lt;core::str::IsNotEmpty as core::ops::function::FnMut&lt;(&amp;&amp;str,)&gt;&gt;::call_mut (1 samples, 0.22%)</title><rect x="25.6125%" y="405" width="0.2227%" height="15" fill="rgb(250,108,0)" fg:x="115" fg:w="1"/><text x="25.8625%" y="415.50"></text></g><g><title>&lt;core::str::IsNotEmpty as core::ops::function::Fn&lt;(&amp;&amp;str,)&gt;&gt;::call (1 samples, 0.22%)</title><rect x="25.6125%" y="389" width="0.2227%" height="15" fill="rgb(228,208,7)" fg:x="115" fg:w="1"/><text x="25.8625%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.22%)</title><rect x="25.6125%" y="373" width="0.2227%" height="15" fill="rgb(244,45,10)" fg:x="115" fg:w="1"/><text x="25.8625%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="26.7261%" y="229" width="0.4454%" height="15" fill="rgb(207,125,25)" fg:x="120" fg:w="2"/><text x="26.9761%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="26.7261%" y="213" width="0.4454%" height="15" fill="rgb(210,195,18)" fg:x="120" fg:w="2"/><text x="26.9761%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="26.7261%" y="197" width="0.4454%" height="15" fill="rgb(249,80,12)" fg:x="120" fg:w="2"/><text x="26.9761%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="26.7261%" y="181" width="0.4454%" height="15" fill="rgb(221,65,9)" fg:x="120" fg:w="2"/><text x="26.9761%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="26.7261%" y="165" width="0.4454%" height="15" fill="rgb(235,49,36)" fg:x="120" fg:w="2"/><text x="26.9761%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="26.7261%" y="149" width="0.4454%" height="15" fill="rgb(225,32,20)" fg:x="120" fg:w="2"/><text x="26.9761%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="26.7261%" y="133" width="0.4454%" height="15" fill="rgb(215,141,46)" fg:x="120" fg:w="2"/><text x="26.9761%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="26.7261%" y="117" width="0.4454%" height="15" fill="rgb(250,160,47)" fg:x="120" fg:w="2"/><text x="26.9761%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="26.9488%" y="101" width="0.2227%" height="15" fill="rgb(216,222,40)" fg:x="121" fg:w="1"/><text x="27.1988%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="26.9488%" y="85" width="0.2227%" height="15" fill="rgb(234,217,39)" fg:x="121" fg:w="1"/><text x="27.1988%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="26.9488%" y="69" width="0.2227%" height="15" fill="rgb(207,178,40)" fg:x="121" fg:w="1"/><text x="27.1988%" y="79.50"></text></g><g><title>_int_malloc (6 samples, 1.34%)</title><rect x="26.0579%" y="245" width="1.3363%" height="15" fill="rgb(221,136,13)" fg:x="117" fg:w="6"/><text x="26.3079%" y="255.50"></text></g><g><title>alloc_perturb (1 samples, 0.22%)</title><rect x="27.1715%" y="229" width="0.2227%" height="15" fill="rgb(249,199,10)" fg:x="122" fg:w="1"/><text x="27.4215%" y="239.50"></text></g><g><title>__GI___libc_malloc (9 samples, 2.00%)</title><rect x="25.8352%" y="261" width="2.0045%" height="15" fill="rgb(249,222,13)" fg:x="116" fg:w="9"/><text x="26.0852%" y="271.50">_..</text></g><g><title>tcache_get (2 samples, 0.45%)</title><rect x="27.3942%" y="245" width="0.4454%" height="15" fill="rgb(244,185,38)" fg:x="123" fg:w="2"/><text x="27.6442%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 2.23%)</title><rect x="25.8352%" y="357" width="2.2272%" height="15" fill="rgb(236,202,9)" fg:x="116" fg:w="10"/><text x="26.0852%" y="367.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 2.23%)</title><rect x="25.8352%" y="341" width="2.2272%" height="15" fill="rgb(250,229,37)" fg:x="116" fg:w="10"/><text x="26.0852%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 2.23%)</title><rect x="25.8352%" y="325" width="2.2272%" height="15" fill="rgb(206,174,23)" fg:x="116" fg:w="10"/><text x="26.0852%" y="335.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 2.23%)</title><rect x="25.8352%" y="309" width="2.2272%" height="15" fill="rgb(211,33,43)" fg:x="116" fg:w="10"/><text x="26.0852%" y="319.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 2.23%)</title><rect x="25.8352%" y="293" width="2.2272%" height="15" fill="rgb(245,58,50)" fg:x="116" fg:w="10"/><text x="26.0852%" y="303.50">a..</text></g><g><title>alloc::alloc::alloc (10 samples, 2.23%)</title><rect x="25.8352%" y="277" width="2.2272%" height="15" fill="rgb(244,68,36)" fg:x="116" fg:w="10"/><text x="26.0852%" y="287.50">a..</text></g><g><title>__rdl_alloc (1 samples, 0.22%)</title><rect x="27.8396%" y="261" width="0.2227%" height="15" fill="rgb(232,229,15)" fg:x="125" fg:w="1"/><text x="28.0896%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.22%)</title><rect x="27.8396%" y="245" width="0.2227%" height="15" fill="rgb(254,30,23)" fg:x="125" fg:w="1"/><text x="28.0896%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 2.90%)</title><rect x="25.3898%" y="549" width="2.8953%" height="15" fill="rgb(235,160,14)" fg:x="114" fg:w="13"/><text x="25.6398%" y="559.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::map (11 samples, 2.45%)</title><rect x="25.8352%" y="533" width="2.4499%" height="15" fill="rgb(212,155,44)" fg:x="116" fg:w="11"/><text x="26.0852%" y="543.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (11 samples, 2.45%)</title><rect x="25.8352%" y="517" width="2.4499%" height="15" fill="rgb(226,2,50)" fg:x="116" fg:w="11"/><text x="26.0852%" y="527.50">co..</text></g><g><title>simsearch::SimSearch&lt;Id&gt;::tokenize::{{closure}} (11 samples, 2.45%)</title><rect x="25.8352%" y="501" width="2.4499%" height="15" fill="rgb(234,177,6)" fg:x="116" fg:w="11"/><text x="26.0852%" y="511.50">si..</text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (11 samples, 2.45%)</title><rect x="25.8352%" y="485" width="2.4499%" height="15" fill="rgb(217,24,9)" fg:x="116" fg:w="11"/><text x="26.0852%" y="495.50">&lt;s..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (11 samples, 2.45%)</title><rect x="25.8352%" y="469" width="2.4499%" height="15" fill="rgb(220,13,46)" fg:x="116" fg:w="11"/><text x="26.0852%" y="479.50">&lt;a..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (11 samples, 2.45%)</title><rect x="25.8352%" y="453" width="2.4499%" height="15" fill="rgb(239,221,27)" fg:x="116" fg:w="11"/><text x="26.0852%" y="463.50">al..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (11 samples, 2.45%)</title><rect x="25.8352%" y="437" width="2.4499%" height="15" fill="rgb(222,198,25)" fg:x="116" fg:w="11"/><text x="26.0852%" y="447.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (11 samples, 2.45%)</title><rect x="25.8352%" y="421" width="2.4499%" height="15" fill="rgb(211,99,13)" fg:x="116" fg:w="11"/><text x="26.0852%" y="431.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 2.45%)</title><rect x="25.8352%" y="405" width="2.4499%" height="15" fill="rgb(232,111,31)" fg:x="116" fg:w="11"/><text x="26.0852%" y="415.50">al..</text></g><g><title>alloc::slice::hack::to_vec (11 samples, 2.45%)</title><rect x="25.8352%" y="389" width="2.4499%" height="15" fill="rgb(245,82,37)" fg:x="116" fg:w="11"/><text x="26.0852%" y="399.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 2.45%)</title><rect x="25.8352%" y="373" width="2.4499%" height="15" fill="rgb(227,149,46)" fg:x="116" fg:w="11"/><text x="26.0852%" y="383.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.22%)</title><rect x="28.0624%" y="357" width="0.2227%" height="15" fill="rgb(218,36,50)" fg:x="126" fg:w="1"/><text x="28.3124%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.22%)</title><rect x="28.0624%" y="341" width="0.2227%" height="15" fill="rgb(226,80,48)" fg:x="126" fg:w="1"/><text x="28.3124%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.22%)</title><rect x="28.0624%" y="325" width="0.2227%" height="15" fill="rgb(238,224,15)" fg:x="126" fg:w="1"/><text x="28.3124%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (1 samples, 0.22%)</title><rect x="28.2851%" y="485" width="0.2227%" height="15" fill="rgb(241,136,10)" fg:x="127" fg:w="1"/><text x="28.5351%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.22%)</title><rect x="28.5078%" y="389" width="0.2227%" height="15" fill="rgb(208,32,45)" fg:x="128" fg:w="1"/><text x="28.7578%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (24 samples, 5.35%)</title><rect x="25.3898%" y="565" width="5.3452%" height="15" fill="rgb(207,135,9)" fg:x="114" fg:w="24"/><text x="25.6398%" y="575.50">alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (11 samples, 2.45%)</title><rect x="28.2851%" y="549" width="2.4499%" height="15" fill="rgb(206,86,44)" fg:x="127" fg:w="11"/><text x="28.5351%" y="559.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 2.45%)</title><rect x="28.2851%" y="533" width="2.4499%" height="15" fill="rgb(245,177,15)" fg:x="127" fg:w="11"/><text x="28.5351%" y="543.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 2.45%)</title><rect x="28.2851%" y="517" width="2.4499%" height="15" fill="rgb(206,64,50)" fg:x="127" fg:w="11"/><text x="28.5351%" y="527.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 2.45%)</title><rect x="28.2851%" y="501" width="2.4499%" height="15" fill="rgb(234,36,40)" fg:x="127" fg:w="11"/><text x="28.5351%" y="511.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 2.23%)</title><rect x="28.5078%" y="485" width="2.2272%" height="15" fill="rgb(213,64,8)" fg:x="128" fg:w="10"/><text x="28.7578%" y="495.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (10 samples, 2.23%)</title><rect x="28.5078%" y="469" width="2.2272%" height="15" fill="rgb(210,75,36)" fg:x="128" fg:w="10"/><text x="28.7578%" y="479.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (10 samples, 2.23%)</title><rect x="28.5078%" y="453" width="2.2272%" height="15" fill="rgb(229,88,21)" fg:x="128" fg:w="10"/><text x="28.7578%" y="463.50">a..</text></g><g><title>alloc::alloc::realloc (10 samples, 2.23%)</title><rect x="28.5078%" y="437" width="2.2272%" height="15" fill="rgb(252,204,47)" fg:x="128" fg:w="10"/><text x="28.7578%" y="447.50">a..</text></g><g><title>__GI___libc_realloc (10 samples, 2.23%)</title><rect x="28.5078%" y="421" width="2.2272%" height="15" fill="rgb(208,77,27)" fg:x="128" fg:w="10"/><text x="28.7578%" y="431.50">_..</text></g><g><title>_int_realloc (10 samples, 2.23%)</title><rect x="28.5078%" y="405" width="2.2272%" height="15" fill="rgb(221,76,26)" fg:x="128" fg:w="10"/><text x="28.7578%" y="415.50">_..</text></g><g><title>_int_malloc (9 samples, 2.00%)</title><rect x="28.7305%" y="389" width="2.0045%" height="15" fill="rgb(225,139,18)" fg:x="129" fg:w="9"/><text x="28.9805%" y="399.50">_..</text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="29.3987%" y="373" width="1.3363%" height="15" fill="rgb(230,137,11)" fg:x="132" fg:w="6"/><text x="29.6487%" y="383.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="29.3987%" y="357" width="1.3363%" height="15" fill="rgb(212,28,1)" fg:x="132" fg:w="6"/><text x="29.6487%" y="367.50"></text></g><g><title>[unknown] (6 samples, 1.34%)</title><rect x="29.3987%" y="341" width="1.3363%" height="15" fill="rgb(248,164,17)" fg:x="132" fg:w="6"/><text x="29.6487%" y="351.50"></text></g><g><title>[unknown] (5 samples, 1.11%)</title><rect x="29.6214%" y="325" width="1.1136%" height="15" fill="rgb(222,171,42)" fg:x="133" fg:w="5"/><text x="29.8714%" y="335.50"></text></g><g><title>[unknown] (5 samples, 1.11%)</title><rect x="29.6214%" y="309" width="1.1136%" height="15" fill="rgb(243,84,45)" fg:x="133" fg:w="5"/><text x="29.8714%" y="319.50"></text></g><g><title>[unknown] (5 samples, 1.11%)</title><rect x="29.6214%" y="293" width="1.1136%" height="15" fill="rgb(252,49,23)" fg:x="133" fg:w="5"/><text x="29.8714%" y="303.50"></text></g><g><title>[unknown] (5 samples, 1.11%)</title><rect x="29.6214%" y="277" width="1.1136%" height="15" fill="rgb(215,19,7)" fg:x="133" fg:w="5"/><text x="29.8714%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.89%)</title><rect x="29.8441%" y="261" width="0.8909%" height="15" fill="rgb(238,81,41)" fg:x="134" fg:w="4"/><text x="30.0941%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.67%)</title><rect x="30.0668%" y="245" width="0.6682%" height="15" fill="rgb(210,199,37)" fg:x="135" fg:w="3"/><text x="30.3168%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.67%)</title><rect x="30.0668%" y="229" width="0.6682%" height="15" fill="rgb(244,192,49)" fg:x="135" fg:w="3"/><text x="30.3168%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="30.5122%" y="213" width="0.2227%" height="15" fill="rgb(226,211,11)" fg:x="137" fg:w="1"/><text x="30.7622%" y="223.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="31.1804%" y="469" width="0.2227%" height="15" fill="rgb(236,162,54)" fg:x="140" fg:w="1"/><text x="31.4304%" y="479.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="31.1804%" y="453" width="0.2227%" height="15" fill="rgb(220,229,9)" fg:x="140" fg:w="1"/><text x="31.4304%" y="463.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.22%)</title><rect x="31.1804%" y="437" width="0.2227%" height="15" fill="rgb(250,87,22)" fg:x="140" fg:w="1"/><text x="31.4304%" y="447.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.22%)</title><rect x="31.4031%" y="469" width="0.2227%" height="15" fill="rgb(239,43,17)" fg:x="141" fg:w="1"/><text x="31.6531%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.22%)</title><rect x="31.4031%" y="453" width="0.2227%" height="15" fill="rgb(231,177,25)" fg:x="141" fg:w="1"/><text x="31.6531%" y="463.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.22%)</title><rect x="31.6258%" y="469" width="0.2227%" height="15" fill="rgb(219,179,1)" fg:x="142" fg:w="1"/><text x="31.8758%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.22%)</title><rect x="31.6258%" y="453" width="0.2227%" height="15" fill="rgb(238,219,53)" fg:x="142" fg:w="1"/><text x="31.8758%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.22%)</title><rect x="31.6258%" y="437" width="0.2227%" height="15" fill="rgb(232,167,36)" fg:x="142" fg:w="1"/><text x="31.8758%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.22%)</title><rect x="31.6258%" y="421" width="0.2227%" height="15" fill="rgb(244,19,51)" fg:x="142" fg:w="1"/><text x="31.8758%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.22%)</title><rect x="31.6258%" y="405" width="0.2227%" height="15" fill="rgb(224,6,22)" fg:x="142" fg:w="1"/><text x="31.8758%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.22%)</title><rect x="31.6258%" y="389" width="0.2227%" height="15" fill="rgb(224,145,5)" fg:x="142" fg:w="1"/><text x="31.8758%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.22%)</title><rect x="31.6258%" y="373" width="0.2227%" height="15" fill="rgb(234,130,49)" fg:x="142" fg:w="1"/><text x="31.8758%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.22%)</title><rect x="31.6258%" y="357" width="0.2227%" height="15" fill="rgb(254,6,2)" fg:x="142" fg:w="1"/><text x="31.8758%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.22%)</title><rect x="31.6258%" y="341" width="0.2227%" height="15" fill="rgb(208,96,46)" fg:x="142" fg:w="1"/><text x="31.8758%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (32 samples, 7.13%)</title><rect x="25.3898%" y="581" width="7.1269%" height="15" fill="rgb(239,3,39)" fg:x="114" fg:w="32"/><text x="25.6398%" y="591.50">&lt;alloc::ve..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 1.78%)</title><rect x="30.7350%" y="565" width="1.7817%" height="15" fill="rgb(233,210,1)" fg:x="138" fg:w="8"/><text x="30.9850%" y="575.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 1.78%)</title><rect x="30.7350%" y="549" width="1.7817%" height="15" fill="rgb(244,137,37)" fg:x="138" fg:w="8"/><text x="30.9850%" y="559.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 1.78%)</title><rect x="30.7350%" y="533" width="1.7817%" height="15" fill="rgb(240,136,2)" fg:x="138" fg:w="8"/><text x="30.9850%" y="543.50">c..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (8 samples, 1.78%)</title><rect x="30.7350%" y="517" width="1.7817%" height="15" fill="rgb(239,18,37)" fg:x="138" fg:w="8"/><text x="30.9850%" y="527.50">c..</text></g><g><title>simsearch::SimSearch&lt;Id&gt;::tokenize::{{closure}} (8 samples, 1.78%)</title><rect x="30.7350%" y="501" width="1.7817%" height="15" fill="rgb(218,185,22)" fg:x="138" fg:w="8"/><text x="30.9850%" y="511.50">s..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (8 samples, 1.78%)</title><rect x="30.7350%" y="485" width="1.7817%" height="15" fill="rgb(225,218,4)" fg:x="138" fg:w="8"/><text x="30.9850%" y="495.50">a..</text></g><g><title>core::unicode::unicode_data::conversions::to_lower (3 samples, 0.67%)</title><rect x="31.8486%" y="469" width="0.6682%" height="15" fill="rgb(230,182,32)" fg:x="143" fg:w="3"/><text x="32.0986%" y="479.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_ascii (1 samples, 0.22%)</title><rect x="32.2940%" y="453" width="0.2227%" height="15" fill="rgb(242,56,43)" fg:x="145" fg:w="1"/><text x="32.5440%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (33 samples, 7.35%)</title><rect x="25.3898%" y="597" width="7.3497%" height="15" fill="rgb(233,99,24)" fg:x="114" fg:w="33"/><text x="25.6398%" y="607.50">&lt;alloc::ve..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="32.5167%" y="581" width="0.2227%" height="15" fill="rgb(234,209,42)" fg:x="146" fg:w="1"/><text x="32.7667%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="32.5167%" y="565" width="0.2227%" height="15" fill="rgb(227,7,12)" fg:x="146" fg:w="1"/><text x="32.7667%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="32.5167%" y="549" width="0.2227%" height="15" fill="rgb(245,203,43)" fg:x="146" fg:w="1"/><text x="32.7667%" y="559.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="32.5167%" y="533" width="0.2227%" height="15" fill="rgb(238,205,33)" fg:x="146" fg:w="1"/><text x="32.7667%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="32.5167%" y="517" width="0.2227%" height="15" fill="rgb(231,56,7)" fg:x="146" fg:w="1"/><text x="32.7667%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.22%)</title><rect x="32.5167%" y="501" width="0.2227%" height="15" fill="rgb(244,186,29)" fg:x="146" fg:w="1"/><text x="32.7667%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.22%)</title><rect x="32.5167%" y="485" width="0.2227%" height="15" fill="rgb(234,111,31)" fg:x="146" fg:w="1"/><text x="32.7667%" y="495.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="32.5167%" y="469" width="0.2227%" height="15" fill="rgb(241,149,10)" fg:x="146" fg:w="1"/><text x="32.7667%" y="479.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.22%)</title><rect x="32.5167%" y="453" width="0.2227%" height="15" fill="rgb(249,206,44)" fg:x="146" fg:w="1"/><text x="32.7667%" y="463.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.22%)</title><rect x="32.5167%" y="437" width="0.2227%" height="15" fill="rgb(251,153,30)" fg:x="146" fg:w="1"/><text x="32.7667%" y="447.50"></text></g><g><title>core::str::pattern::Searcher::next_match (1 samples, 0.22%)</title><rect x="32.5167%" y="421" width="0.2227%" height="15" fill="rgb(239,152,38)" fg:x="146" fg:w="1"/><text x="32.7667%" y="431.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.22%)</title><rect x="32.5167%" y="405" width="0.2227%" height="15" fill="rgb(249,139,47)" fg:x="146" fg:w="1"/><text x="32.7667%" y="415.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="32.5167%" y="389" width="0.2227%" height="15" fill="rgb(244,64,35)" fg:x="146" fg:w="1"/><text x="32.7667%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (34 samples, 7.57%)</title><rect x="25.3898%" y="645" width="7.5724%" height="15" fill="rgb(216,46,15)" fg:x="114" fg:w="34"/><text x="25.6398%" y="655.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (34 samples, 7.57%)</title><rect x="25.3898%" y="629" width="7.5724%" height="15" fill="rgb(250,74,19)" fg:x="114" fg:w="34"/><text x="25.6398%" y="639.50">&lt;alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (34 samples, 7.57%)</title><rect x="25.3898%" y="613" width="7.5724%" height="15" fill="rgb(249,42,33)" fg:x="114" fg:w="34"/><text x="25.6398%" y="623.50">&lt;alloc::ve..</text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.22%)</title><rect x="32.7394%" y="597" width="0.2227%" height="15" fill="rgb(242,149,17)" fg:x="147" fg:w="1"/><text x="32.9894%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="32.9621%" y="629" width="0.2227%" height="15" fill="rgb(244,29,21)" fg:x="148" fg:w="1"/><text x="33.2121%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (1 samples, 0.22%)</title><rect x="32.9621%" y="613" width="0.2227%" height="15" fill="rgb(220,130,37)" fg:x="148" fg:w="1"/><text x="33.2121%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.22%)</title><rect x="32.9621%" y="597" width="0.2227%" height="15" fill="rgb(211,67,2)" fg:x="148" fg:w="1"/><text x="33.2121%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.22%)</title><rect x="32.9621%" y="581" width="0.2227%" height="15" fill="rgb(235,68,52)" fg:x="148" fg:w="1"/><text x="33.2121%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.22%)</title><rect x="32.9621%" y="565" width="0.2227%" height="15" fill="rgb(246,142,3)" fg:x="148" fg:w="1"/><text x="33.2121%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="32.9621%" y="549" width="0.2227%" height="15" fill="rgb(241,25,7)" fg:x="148" fg:w="1"/><text x="33.2121%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.22%)</title><rect x="32.9621%" y="533" width="0.2227%" height="15" fill="rgb(242,119,39)" fg:x="148" fg:w="1"/><text x="33.2121%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.22%)</title><rect x="32.9621%" y="517" width="0.2227%" height="15" fill="rgb(241,98,45)" fg:x="148" fg:w="1"/><text x="33.2121%" y="527.50"></text></g><g><title>_int_free (1 samples, 0.22%)</title><rect x="32.9621%" y="501" width="0.2227%" height="15" fill="rgb(254,28,30)" fg:x="148" fg:w="1"/><text x="33.2121%" y="511.50"></text></g><g><title>simsearch::SimSearch&lt;Id&gt;::tokenize (37 samples, 8.24%)</title><rect x="25.1670%" y="661" width="8.2405%" height="15" fill="rgb(241,142,54)" fg:x="113" fg:w="37"/><text x="25.4170%" y="671.50">simsearch::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (2 samples, 0.45%)</title><rect x="32.9621%" y="645" width="0.4454%" height="15" fill="rgb(222,85,15)" fg:x="148" fg:w="2"/><text x="33.2121%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (1 samples, 0.22%)</title><rect x="33.1849%" y="629" width="0.2227%" height="15" fill="rgb(210,85,47)" fg:x="149" fg:w="1"/><text x="33.4349%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="33.1849%" y="613" width="0.2227%" height="15" fill="rgb(224,206,25)" fg:x="149" fg:w="1"/><text x="33.4349%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.22%)</title><rect x="33.1849%" y="597" width="0.2227%" height="15" fill="rgb(243,201,19)" fg:x="149" fg:w="1"/><text x="33.4349%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.22%)</title><rect x="33.1849%" y="581" width="0.2227%" height="15" fill="rgb(236,59,4)" fg:x="149" fg:w="1"/><text x="33.4349%" y="591.50"></text></g><g><title>_int_free (1 samples, 0.22%)</title><rect x="33.1849%" y="565" width="0.2227%" height="15" fill="rgb(254,179,45)" fg:x="149" fg:w="1"/><text x="33.4349%" y="575.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.22%)</title><rect x="33.4076%" y="661" width="0.2227%" height="15" fill="rgb(226,14,10)" fg:x="150" fg:w="1"/><text x="33.6576%" y="671.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (1 samples, 0.22%)</title><rect x="33.4076%" y="645" width="0.2227%" height="15" fill="rgb(244,27,41)" fg:x="150" fg:w="1"/><text x="33.6576%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (1 samples, 0.22%)</title><rect x="33.4076%" y="629" width="0.2227%" height="15" fill="rgb(235,35,32)" fg:x="150" fg:w="1"/><text x="33.6576%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::string::String,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.22%)</title><rect x="33.4076%" y="613" width="0.2227%" height="15" fill="rgb(218,68,31)" fg:x="150" fg:w="1"/><text x="33.6576%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.22%)</title><rect x="33.4076%" y="597" width="0.2227%" height="15" fill="rgb(207,120,37)" fg:x="150" fg:w="1"/><text x="33.6576%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.22%)</title><rect x="33.4076%" y="581" width="0.2227%" height="15" fill="rgb(227,98,0)" fg:x="150" fg:w="1"/><text x="33.6576%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.22%)</title><rect x="33.4076%" y="565" width="0.2227%" height="15" fill="rgb(207,7,3)" fg:x="150" fg:w="1"/><text x="33.6576%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.22%)</title><rect x="33.4076%" y="549" width="0.2227%" height="15" fill="rgb(206,98,19)" fg:x="150" fg:w="1"/><text x="33.6576%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="33.4076%" y="533" width="0.2227%" height="15" fill="rgb(217,5,26)" fg:x="150" fg:w="1"/><text x="33.6576%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.22%)</title><rect x="33.4076%" y="517" width="0.2227%" height="15" fill="rgb(235,190,38)" fg:x="150" fg:w="1"/><text x="33.6576%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.22%)</title><rect x="33.4076%" y="501" width="0.2227%" height="15" fill="rgb(247,86,24)" fg:x="150" fg:w="1"/><text x="33.6576%" y="511.50"></text></g><g><title>_int_free (1 samples, 0.22%)</title><rect x="33.4076%" y="485" width="0.2227%" height="15" fill="rgb(205,101,16)" fg:x="150" fg:w="1"/><text x="33.6576%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.45%)</title><rect x="33.6303%" y="501" width="0.4454%" height="15" fill="rgb(246,168,33)" fg:x="151" fg:w="2"/><text x="33.8803%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.45%)</title><rect x="33.6303%" y="485" width="0.4454%" height="15" fill="rgb(231,114,1)" fg:x="151" fg:w="2"/><text x="33.8803%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.45%)</title><rect x="33.6303%" y="469" width="0.4454%" height="15" fill="rgb(207,184,53)" fg:x="151" fg:w="2"/><text x="33.8803%" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.45%)</title><rect x="33.6303%" y="453" width="0.4454%" height="15" fill="rgb(224,95,51)" fg:x="151" fg:w="2"/><text x="33.8803%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.45%)</title><rect x="33.6303%" y="437" width="0.4454%" height="15" fill="rgb(212,188,45)" fg:x="151" fg:w="2"/><text x="33.8803%" y="447.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (3 samples, 0.67%)</title><rect x="33.6303%" y="565" width="0.6682%" height="15" fill="rgb(223,154,38)" fg:x="151" fg:w="3"/><text x="33.8803%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.67%)</title><rect x="33.6303%" y="549" width="0.6682%" height="15" fill="rgb(251,22,52)" fg:x="151" fg:w="3"/><text x="33.8803%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (3 samples, 0.67%)</title><rect x="33.6303%" y="533" width="0.6682%" height="15" fill="rgb(229,209,22)" fg:x="151" fg:w="3"/><text x="33.8803%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3 samples, 0.67%)</title><rect x="33.6303%" y="517" width="0.6682%" height="15" fill="rgb(234,138,34)" fg:x="151" fg:w="3"/><text x="33.8803%" y="527.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.22%)</title><rect x="34.0757%" y="501" width="0.2227%" height="15" fill="rgb(212,95,11)" fg:x="153" fg:w="1"/><text x="34.3257%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="34.0757%" y="485" width="0.2227%" height="15" fill="rgb(240,179,47)" fg:x="153" fg:w="1"/><text x="34.3257%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="34.0757%" y="469" width="0.2227%" height="15" fill="rgb(240,163,11)" fg:x="153" fg:w="1"/><text x="34.3257%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="34.0757%" y="453" width="0.2227%" height="15" fill="rgb(236,37,12)" fg:x="153" fg:w="1"/><text x="34.3257%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (3 samples, 0.67%)</title><rect x="34.2984%" y="565" width="0.6682%" height="15" fill="rgb(232,164,16)" fg:x="154" fg:w="3"/><text x="34.5484%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (3 samples, 0.67%)</title><rect x="34.2984%" y="549" width="0.6682%" height="15" fill="rgb(244,205,15)" fg:x="154" fg:w="3"/><text x="34.5484%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.67%)</title><rect x="34.2984%" y="533" width="0.6682%" height="15" fill="rgb(223,117,47)" fg:x="154" fg:w="3"/><text x="34.5484%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="34.5212%" y="517" width="0.4454%" height="15" fill="rgb(244,107,35)" fg:x="155" fg:w="2"/><text x="34.7712%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="34.5212%" y="501" width="0.4454%" height="15" fill="rgb(205,140,8)" fg:x="155" fg:w="2"/><text x="34.7712%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="34.5212%" y="485" width="0.4454%" height="15" fill="rgb(228,84,46)" fg:x="155" fg:w="2"/><text x="34.7712%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="34.5212%" y="469" width="0.4454%" height="15" fill="rgb(254,188,9)" fg:x="155" fg:w="2"/><text x="34.7712%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="34.5212%" y="453" width="0.4454%" height="15" fill="rgb(206,112,54)" fg:x="155" fg:w="2"/><text x="34.7712%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="34.5212%" y="437" width="0.4454%" height="15" fill="rgb(216,84,49)" fg:x="155" fg:w="2"/><text x="34.7712%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="34.5212%" y="421" width="0.4454%" height="15" fill="rgb(214,194,35)" fg:x="155" fg:w="2"/><text x="34.7712%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="34.5212%" y="405" width="0.4454%" height="15" fill="rgb(249,28,3)" fg:x="155" fg:w="2"/><text x="34.7712%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="34.5212%" y="389" width="0.4454%" height="15" fill="rgb(222,56,52)" fg:x="155" fg:w="2"/><text x="34.7712%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="34.5212%" y="373" width="0.4454%" height="15" fill="rgb(245,217,50)" fg:x="155" fg:w="2"/><text x="34.7712%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (7 samples, 1.56%)</title><rect x="33.6303%" y="629" width="1.5590%" height="15" fill="rgb(213,201,24)" fg:x="151" fg:w="7"/><text x="33.8803%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7 samples, 1.56%)</title><rect x="33.6303%" y="613" width="1.5590%" height="15" fill="rgb(248,116,28)" fg:x="151" fg:w="7"/><text x="33.8803%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 1.56%)</title><rect x="33.6303%" y="597" width="1.5590%" height="15" fill="rgb(219,72,43)" fg:x="151" fg:w="7"/><text x="33.8803%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (7 samples, 1.56%)</title><rect x="33.6303%" y="581" width="1.5590%" height="15" fill="rgb(209,138,14)" fg:x="151" fg:w="7"/><text x="33.8803%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.22%)</title><rect x="34.9666%" y="565" width="0.2227%" height="15" fill="rgb(222,18,33)" fg:x="157" fg:w="1"/><text x="35.2166%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.22%)</title><rect x="34.9666%" y="549" width="0.2227%" height="15" fill="rgb(213,199,7)" fg:x="157" fg:w="1"/><text x="35.2166%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.22%)</title><rect x="34.9666%" y="533" width="0.2227%" height="15" fill="rgb(250,110,10)" fg:x="157" fg:w="1"/><text x="35.2166%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 1.34%)</title><rect x="35.1893%" y="581" width="1.3363%" height="15" fill="rgb(248,123,6)" fg:x="158" fg:w="6"/><text x="35.4393%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 1.34%)</title><rect x="35.1893%" y="565" width="1.3363%" height="15" fill="rgb(206,91,31)" fg:x="158" fg:w="6"/><text x="35.4393%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 1.34%)</title><rect x="35.1893%" y="549" width="1.3363%" height="15" fill="rgb(211,154,13)" fg:x="158" fg:w="6"/><text x="35.4393%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.89%)</title><rect x="35.6347%" y="533" width="0.8909%" height="15" fill="rgb(225,148,7)" fg:x="160" fg:w="4"/><text x="35.8847%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.45%)</title><rect x="36.0802%" y="517" width="0.4454%" height="15" fill="rgb(220,160,43)" fg:x="162" fg:w="2"/><text x="36.3302%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (7 samples, 1.56%)</title><rect x="35.1893%" y="613" width="1.5590%" height="15" fill="rgb(213,52,39)" fg:x="158" fg:w="7"/><text x="35.4393%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (7 samples, 1.56%)</title><rect x="35.1893%" y="597" width="1.5590%" height="15" fill="rgb(243,137,7)" fg:x="158" fg:w="7"/><text x="35.4393%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.22%)</title><rect x="36.5256%" y="581" width="0.2227%" height="15" fill="rgb(230,79,13)" fg:x="164" fg:w="1"/><text x="36.7756%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="36.5256%" y="565" width="0.2227%" height="15" fill="rgb(247,105,23)" fg:x="164" fg:w="1"/><text x="36.7756%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="36.5256%" y="549" width="0.2227%" height="15" fill="rgb(223,179,41)" fg:x="164" fg:w="1"/><text x="36.7756%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="36.5256%" y="533" width="0.2227%" height="15" fill="rgb(218,9,34)" fg:x="164" fg:w="1"/><text x="36.7756%" y="543.50"></text></g><g><title>hashbrown::map::make_insert_hash (8 samples, 1.78%)</title><rect x="35.1893%" y="629" width="1.7817%" height="15" fill="rgb(222,106,8)" fg:x="158" fg:w="8"/><text x="35.4393%" y="639.50">h..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.22%)</title><rect x="36.7483%" y="613" width="0.2227%" height="15" fill="rgb(211,220,0)" fg:x="165" fg:w="1"/><text x="36.9983%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.22%)</title><rect x="36.7483%" y="597" width="0.2227%" height="15" fill="rgb(229,52,16)" fg:x="165" fg:w="1"/><text x="36.9983%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.22%)</title><rect x="36.7483%" y="581" width="0.2227%" height="15" fill="rgb(212,155,18)" fg:x="165" fg:w="1"/><text x="36.9983%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.22%)</title><rect x="36.7483%" y="565" width="0.2227%" height="15" fill="rgb(242,21,14)" fg:x="165" fg:w="1"/><text x="36.9983%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.22%)</title><rect x="36.7483%" y="549" width="0.2227%" height="15" fill="rgb(222,19,48)" fg:x="165" fg:w="1"/><text x="36.9983%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.67%)</title><rect x="36.9710%" y="613" width="0.6682%" height="15" fill="rgb(232,45,27)" fg:x="166" fg:w="3"/><text x="37.2210%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.67%)</title><rect x="36.9710%" y="597" width="0.6682%" height="15" fill="rgb(249,103,42)" fg:x="166" fg:w="3"/><text x="37.2210%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.67%)</title><rect x="36.9710%" y="581" width="0.6682%" height="15" fill="rgb(246,81,33)" fg:x="166" fg:w="3"/><text x="37.2210%" y="591.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.22%)</title><rect x="37.4165%" y="565" width="0.2227%" height="15" fill="rgb(252,33,42)" fg:x="168" fg:w="1"/><text x="37.6665%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (2 samples, 0.45%)</title><rect x="37.6392%" y="613" width="0.4454%" height="15" fill="rgb(209,212,41)" fg:x="169" fg:w="2"/><text x="37.8892%" y="623.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (2 samples, 0.45%)</title><rect x="37.6392%" y="597" width="0.4454%" height="15" fill="rgb(207,154,6)" fg:x="169" fg:w="2"/><text x="37.8892%" y="607.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (2 samples, 0.45%)</title><rect x="37.6392%" y="581" width="0.4454%" height="15" fill="rgb(223,64,47)" fg:x="169" fg:w="2"/><text x="37.8892%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.45%)</title><rect x="37.6392%" y="565" width="0.4454%" height="15" fill="rgb(211,161,38)" fg:x="169" fg:w="2"/><text x="37.8892%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.45%)</title><rect x="37.6392%" y="549" width="0.4454%" height="15" fill="rgb(219,138,40)" fg:x="169" fg:w="2"/><text x="37.8892%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.45%)</title><rect x="37.6392%" y="533" width="0.4454%" height="15" fill="rgb(241,228,46)" fg:x="169" fg:w="2"/><text x="37.8892%" y="543.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.45%)</title><rect x="37.6392%" y="517" width="0.4454%" height="15" fill="rgb(223,209,38)" fg:x="169" fg:w="2"/><text x="37.8892%" y="527.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (30 samples, 6.68%)</title><rect x="33.6303%" y="645" width="6.6815%" height="15" fill="rgb(236,164,45)" fg:x="151" fg:w="30"/><text x="33.8803%" y="655.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15 samples, 3.34%)</title><rect x="36.9710%" y="629" width="3.3408%" height="15" fill="rgb(231,15,5)" fg:x="166" fg:w="15"/><text x="37.2210%" y="639.50">has..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (10 samples, 2.23%)</title><rect x="38.0846%" y="613" width="2.2272%" height="15" fill="rgb(252,35,15)" fg:x="171" fg:w="10"/><text x="38.3346%" y="623.50">h..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (10 samples, 2.23%)</title><rect x="38.0846%" y="597" width="2.2272%" height="15" fill="rgb(248,181,18)" fg:x="171" fg:w="10"/><text x="38.3346%" y="607.50">&lt;..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (10 samples, 2.23%)</title><rect x="38.0846%" y="581" width="2.2272%" height="15" fill="rgb(233,39,42)" fg:x="171" fg:w="10"/><text x="38.3346%" y="591.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 2.23%)</title><rect x="38.0846%" y="565" width="2.2272%" height="15" fill="rgb(238,110,33)" fg:x="171" fg:w="10"/><text x="38.3346%" y="575.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (10 samples, 2.23%)</title><rect x="38.0846%" y="549" width="2.2272%" height="15" fill="rgb(233,195,10)" fg:x="171" fg:w="10"/><text x="38.3346%" y="559.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10 samples, 2.23%)</title><rect x="38.0846%" y="533" width="2.2272%" height="15" fill="rgb(254,105,3)" fg:x="171" fg:w="10"/><text x="38.3346%" y="543.50">&lt;..</text></g><g><title>__memcmp_avx2_movbe (4 samples, 0.89%)</title><rect x="39.4209%" y="517" width="0.8909%" height="15" fill="rgb(221,225,9)" fg:x="177" fg:w="4"/><text x="39.6709%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (32 samples, 7.13%)</title><rect x="33.6303%" y="661" width="7.1269%" height="15" fill="rgb(224,227,45)" fg:x="151" fg:w="32"/><text x="33.8803%" y="671.50">std::colle..</text></g><g><title>std::collections::hash::map::map_entry (2 samples, 0.45%)</title><rect x="40.3118%" y="645" width="0.4454%" height="15" fill="rgb(229,198,43)" fg:x="181" fg:w="2"/><text x="40.5618%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.22%)</title><rect x="40.7572%" y="613" width="0.2227%" height="15" fill="rgb(206,209,35)" fg:x="183" fg:w="1"/><text x="41.0072%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.22%)</title><rect x="40.7572%" y="597" width="0.2227%" height="15" fill="rgb(245,195,53)" fg:x="183" fg:w="1"/><text x="41.0072%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.22%)</title><rect x="40.7572%" y="581" width="0.2227%" height="15" fill="rgb(240,92,26)" fg:x="183" fg:w="1"/><text x="41.0072%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.22%)</title><rect x="40.7572%" y="565" width="0.2227%" height="15" fill="rgb(207,40,23)" fg:x="183" fg:w="1"/><text x="41.0072%" y="575.50"></text></g><g><title>hashbrown::map::make_insert_hash (3 samples, 0.67%)</title><rect x="40.7572%" y="629" width="0.6682%" height="15" fill="rgb(223,111,35)" fg:x="183" fg:w="3"/><text x="41.0072%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.45%)</title><rect x="40.9800%" y="613" width="0.4454%" height="15" fill="rgb(229,147,28)" fg:x="184" fg:w="2"/><text x="41.2300%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.45%)</title><rect x="40.9800%" y="597" width="0.4454%" height="15" fill="rgb(211,29,28)" fg:x="184" fg:w="2"/><text x="41.2300%" y="607.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.22%)</title><rect x="41.2027%" y="581" width="0.2227%" height="15" fill="rgb(228,72,33)" fg:x="185" fg:w="1"/><text x="41.4527%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="41.2027%" y="565" width="0.2227%" height="15" fill="rgb(205,214,31)" fg:x="185" fg:w="1"/><text x="41.4527%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="41.2027%" y="549" width="0.2227%" height="15" fill="rgb(224,111,15)" fg:x="185" fg:w="1"/><text x="41.4527%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="41.2027%" y="533" width="0.2227%" height="15" fill="rgb(253,21,26)" fg:x="185" fg:w="1"/><text x="41.4527%" y="543.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.22%)</title><rect x="41.2027%" y="517" width="0.2227%" height="15" fill="rgb(245,139,43)" fg:x="185" fg:w="1"/><text x="41.4527%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="41.4254%" y="597" width="0.2227%" height="15" fill="rgb(252,170,7)" fg:x="186" fg:w="1"/><text x="41.6754%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="41.4254%" y="581" width="0.2227%" height="15" fill="rgb(231,118,14)" fg:x="186" fg:w="1"/><text x="41.6754%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="41.4254%" y="565" width="0.2227%" height="15" fill="rgb(238,83,0)" fg:x="186" fg:w="1"/><text x="41.6754%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.22%)</title><rect x="41.4254%" y="549" width="0.2227%" height="15" fill="rgb(221,39,39)" fg:x="186" fg:w="1"/><text x="41.6754%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.67%)</title><rect x="41.4254%" y="629" width="0.6682%" height="15" fill="rgb(222,119,46)" fg:x="186" fg:w="3"/><text x="41.6754%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.67%)</title><rect x="41.4254%" y="613" width="0.6682%" height="15" fill="rgb(222,165,49)" fg:x="186" fg:w="3"/><text x="41.6754%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (2 samples, 0.45%)</title><rect x="41.6481%" y="597" width="0.4454%" height="15" fill="rgb(219,113,52)" fg:x="187" fg:w="2"/><text x="41.8981%" y="607.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (2 samples, 0.45%)</title><rect x="41.6481%" y="581" width="0.4454%" height="15" fill="rgb(214,7,15)" fg:x="187" fg:w="2"/><text x="41.8981%" y="591.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (2 samples, 0.45%)</title><rect x="41.6481%" y="565" width="0.4454%" height="15" fill="rgb(235,32,4)" fg:x="187" fg:w="2"/><text x="41.8981%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.45%)</title><rect x="41.6481%" y="549" width="0.4454%" height="15" fill="rgb(238,90,54)" fg:x="187" fg:w="2"/><text x="41.8981%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.45%)</title><rect x="41.6481%" y="533" width="0.4454%" height="15" fill="rgb(213,208,19)" fg:x="187" fg:w="2"/><text x="41.8981%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.45%)</title><rect x="41.6481%" y="517" width="0.4454%" height="15" fill="rgb(233,156,4)" fg:x="187" fg:w="2"/><text x="41.8981%" y="527.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.45%)</title><rect x="41.6481%" y="501" width="0.4454%" height="15" fill="rgb(207,194,5)" fg:x="187" fg:w="2"/><text x="41.8981%" y="511.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.22%)</title><rect x="42.0935%" y="613" width="0.2227%" height="15" fill="rgb(206,111,30)" fg:x="189" fg:w="1"/><text x="42.3435%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.22%)</title><rect x="42.0935%" y="597" width="0.2227%" height="15" fill="rgb(243,70,54)" fg:x="189" fg:w="1"/><text x="42.3435%" y="607.50"></text></g><g><title>core::ptr::write (1 samples, 0.22%)</title><rect x="42.0935%" y="581" width="0.2227%" height="15" fill="rgb(242,28,8)" fg:x="189" fg:w="1"/><text x="42.3435%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (1 samples, 0.22%)</title><rect x="42.3163%" y="565" width="0.2227%" height="15" fill="rgb(219,106,18)" fg:x="190" fg:w="1"/><text x="42.5663%" y="575.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="42.3163%" y="549" width="0.2227%" height="15" fill="rgb(244,222,10)" fg:x="190" fg:w="1"/><text x="42.5663%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (1 samples, 0.22%)</title><rect x="42.3163%" y="533" width="0.2227%" height="15" fill="rgb(236,179,52)" fg:x="190" fg:w="1"/><text x="42.5663%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (1 samples, 0.22%)</title><rect x="42.3163%" y="517" width="0.2227%" height="15" fill="rgb(213,23,39)" fg:x="190" fg:w="1"/><text x="42.5663%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.22%)</title><rect x="42.3163%" y="501" width="0.2227%" height="15" fill="rgb(238,48,10)" fg:x="190" fg:w="1"/><text x="42.5663%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.22%)</title><rect x="42.3163%" y="485" width="0.2227%" height="15" fill="rgb(251,196,23)" fg:x="190" fg:w="1"/><text x="42.5663%" y="495.50"></text></g><g><title>__GI_munmap (1 samples, 0.22%)</title><rect x="42.3163%" y="469" width="0.2227%" height="15" fill="rgb(250,152,24)" fg:x="190" fg:w="1"/><text x="42.5663%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="42.3163%" y="453" width="0.2227%" height="15" fill="rgb(209,150,17)" fg:x="190" fg:w="1"/><text x="42.5663%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="42.3163%" y="437" width="0.2227%" height="15" fill="rgb(234,202,34)" fg:x="190" fg:w="1"/><text x="42.5663%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="42.3163%" y="421" width="0.2227%" height="15" fill="rgb(253,148,53)" fg:x="190" fg:w="1"/><text x="42.5663%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="42.3163%" y="405" width="0.2227%" height="15" fill="rgb(218,129,16)" fg:x="190" fg:w="1"/><text x="42.5663%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="42.3163%" y="389" width="0.2227%" height="15" fill="rgb(216,85,19)" fg:x="190" fg:w="1"/><text x="42.5663%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="42.3163%" y="373" width="0.2227%" height="15" fill="rgb(235,228,7)" fg:x="190" fg:w="1"/><text x="42.5663%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="42.3163%" y="357" width="0.2227%" height="15" fill="rgb(245,175,0)" fg:x="190" fg:w="1"/><text x="42.5663%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="42.3163%" y="341" width="0.2227%" height="15" fill="rgb(208,168,36)" fg:x="190" fg:w="1"/><text x="42.5663%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="42.3163%" y="325" width="0.2227%" height="15" fill="rgb(246,171,24)" fg:x="190" fg:w="1"/><text x="42.5663%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="42.3163%" y="309" width="0.2227%" height="15" fill="rgb(215,142,24)" fg:x="190" fg:w="1"/><text x="42.5663%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.67%)</title><rect x="42.7617%" y="453" width="0.6682%" height="15" fill="rgb(250,187,7)" fg:x="192" fg:w="3"/><text x="43.0117%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 1.11%)</title><rect x="42.5390%" y="501" width="1.1136%" height="15" fill="rgb(228,66,33)" fg:x="191" fg:w="5"/><text x="42.7890%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 1.11%)</title><rect x="42.5390%" y="485" width="1.1136%" height="15" fill="rgb(234,215,21)" fg:x="191" fg:w="5"/><text x="42.7890%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 1.11%)</title><rect x="42.5390%" y="469" width="1.1136%" height="15" fill="rgb(222,191,20)" fg:x="191" fg:w="5"/><text x="42.7890%" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.22%)</title><rect x="43.4298%" y="453" width="0.2227%" height="15" fill="rgb(245,79,54)" fg:x="195" fg:w="1"/><text x="43.6798%" y="463.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (6 samples, 1.34%)</title><rect x="42.5390%" y="565" width="1.3363%" height="15" fill="rgb(240,10,37)" fg:x="191" fg:w="6"/><text x="42.7890%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 1.34%)</title><rect x="42.5390%" y="549" width="1.3363%" height="15" fill="rgb(214,192,32)" fg:x="191" fg:w="6"/><text x="42.7890%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 1.34%)</title><rect x="42.5390%" y="533" width="1.3363%" height="15" fill="rgb(209,36,54)" fg:x="191" fg:w="6"/><text x="42.7890%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (6 samples, 1.34%)</title><rect x="42.5390%" y="517" width="1.3363%" height="15" fill="rgb(220,10,11)" fg:x="191" fg:w="6"/><text x="42.7890%" y="527.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.22%)</title><rect x="43.6526%" y="501" width="0.2227%" height="15" fill="rgb(221,106,17)" fg:x="196" fg:w="1"/><text x="43.9026%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="43.6526%" y="485" width="0.2227%" height="15" fill="rgb(251,142,44)" fg:x="196" fg:w="1"/><text x="43.9026%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="43.6526%" y="469" width="0.2227%" height="15" fill="rgb(238,13,15)" fg:x="196" fg:w="1"/><text x="43.9026%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.22%)</title><rect x="43.6526%" y="453" width="0.2227%" height="15" fill="rgb(208,107,27)" fg:x="196" fg:w="1"/><text x="43.9026%" y="463.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.22%)</title><rect x="43.6526%" y="437" width="0.2227%" height="15" fill="rgb(205,136,37)" fg:x="196" fg:w="1"/><text x="43.9026%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (3 samples, 0.67%)</title><rect x="43.8753%" y="565" width="0.6682%" height="15" fill="rgb(250,205,27)" fg:x="197" fg:w="3"/><text x="44.1253%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (3 samples, 0.67%)</title><rect x="43.8753%" y="549" width="0.6682%" height="15" fill="rgb(210,80,43)" fg:x="197" fg:w="3"/><text x="44.1253%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.67%)</title><rect x="43.8753%" y="533" width="0.6682%" height="15" fill="rgb(247,160,36)" fg:x="197" fg:w="3"/><text x="44.1253%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.67%)</title><rect x="43.8753%" y="517" width="0.6682%" height="15" fill="rgb(234,13,49)" fg:x="197" fg:w="3"/><text x="44.1253%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.67%)</title><rect x="43.8753%" y="501" width="0.6682%" height="15" fill="rgb(234,122,0)" fg:x="197" fg:w="3"/><text x="44.1253%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.67%)</title><rect x="43.8753%" y="485" width="0.6682%" height="15" fill="rgb(207,146,38)" fg:x="197" fg:w="3"/><text x="44.1253%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.67%)</title><rect x="43.8753%" y="469" width="0.6682%" height="15" fill="rgb(207,177,25)" fg:x="197" fg:w="3"/><text x="44.1253%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.67%)</title><rect x="43.8753%" y="453" width="0.6682%" height="15" fill="rgb(211,178,42)" fg:x="197" fg:w="3"/><text x="44.1253%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="44.0980%" y="437" width="0.4454%" height="15" fill="rgb(230,69,54)" fg:x="198" fg:w="2"/><text x="44.3480%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="44.0980%" y="421" width="0.4454%" height="15" fill="rgb(214,135,41)" fg:x="198" fg:w="2"/><text x="44.3480%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="44.0980%" y="405" width="0.4454%" height="15" fill="rgb(237,67,25)" fg:x="198" fg:w="2"/><text x="44.3480%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="44.0980%" y="389" width="0.4454%" height="15" fill="rgb(222,189,50)" fg:x="198" fg:w="2"/><text x="44.3480%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="44.3207%" y="373" width="0.2227%" height="15" fill="rgb(245,148,34)" fg:x="199" fg:w="1"/><text x="44.5707%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (12 samples, 2.67%)</title><rect x="42.3163%" y="613" width="2.6726%" height="15" fill="rgb(222,29,6)" fg:x="190" fg:w="12"/><text x="42.5663%" y="623.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 2.67%)</title><rect x="42.3163%" y="597" width="2.6726%" height="15" fill="rgb(221,189,43)" fg:x="190" fg:w="12"/><text x="42.5663%" y="607.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (12 samples, 2.67%)</title><rect x="42.3163%" y="581" width="2.6726%" height="15" fill="rgb(207,36,27)" fg:x="190" fg:w="12"/><text x="42.5663%" y="591.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (2 samples, 0.45%)</title><rect x="44.5434%" y="565" width="0.4454%" height="15" fill="rgb(217,90,24)" fg:x="200" fg:w="2"/><text x="44.7934%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.45%)</title><rect x="44.5434%" y="549" width="0.4454%" height="15" fill="rgb(224,66,35)" fg:x="200" fg:w="2"/><text x="44.7934%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.22%)</title><rect x="44.7661%" y="533" width="0.2227%" height="15" fill="rgb(221,13,50)" fg:x="201" fg:w="1"/><text x="45.0161%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.22%)</title><rect x="44.7661%" y="517" width="0.2227%" height="15" fill="rgb(236,68,49)" fg:x="201" fg:w="1"/><text x="45.0161%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.22%)</title><rect x="44.7661%" y="501" width="0.2227%" height="15" fill="rgb(229,146,28)" fg:x="201" fg:w="1"/><text x="45.0161%" y="511.50"></text></g><g><title>simsearch::SimSearch&lt;Id&gt;::insert (147 samples, 32.74%)</title><rect x="12.4722%" y="693" width="32.7394%" height="15" fill="rgb(225,31,38)" fg:x="56" fg:w="147"/><text x="12.7222%" y="703.50">simsearch::SimSearch&lt;Id&gt;::insert</text></g><g><title>simsearch::SimSearch&lt;Id&gt;::insert_tokens (147 samples, 32.74%)</title><rect x="12.4722%" y="677" width="32.7394%" height="15" fill="rgb(250,208,3)" fg:x="56" fg:w="147"/><text x="12.7222%" y="687.50">simsearch::SimSearch&lt;Id&gt;::insert_tokens</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (20 samples, 4.45%)</title><rect x="40.7572%" y="661" width="4.4543%" height="15" fill="rgb(246,54,23)" fg:x="183" fg:w="20"/><text x="41.0072%" y="671.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 4.45%)</title><rect x="40.7572%" y="645" width="4.4543%" height="15" fill="rgb(243,76,11)" fg:x="183" fg:w="20"/><text x="41.0072%" y="655.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 3.12%)</title><rect x="42.0935%" y="629" width="3.1180%" height="15" fill="rgb(245,21,50)" fg:x="189" fg:w="14"/><text x="42.3435%" y="639.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.22%)</title><rect x="44.9889%" y="613" width="0.2227%" height="15" fill="rgb(228,9,43)" fg:x="202" fg:w="1"/><text x="45.2389%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.45%)</title><rect x="45.4343%" y="613" width="0.4454%" height="15" fill="rgb(208,100,47)" fg:x="204" fg:w="2"/><text x="45.6843%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.45%)</title><rect x="45.4343%" y="597" width="0.4454%" height="15" fill="rgb(232,26,8)" fg:x="204" fg:w="2"/><text x="45.6843%" y="607.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.22%)</title><rect x="45.6570%" y="581" width="0.2227%" height="15" fill="rgb(216,166,38)" fg:x="205" fg:w="1"/><text x="45.9070%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.89%)</title><rect x="45.4343%" y="661" width="0.8909%" height="15" fill="rgb(251,202,51)" fg:x="204" fg:w="4"/><text x="45.6843%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.89%)</title><rect x="45.4343%" y="645" width="0.8909%" height="15" fill="rgb(254,216,34)" fg:x="204" fg:w="4"/><text x="45.6843%" y="655.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.89%)</title><rect x="45.4343%" y="629" width="0.8909%" height="15" fill="rgb(251,32,27)" fg:x="204" fg:w="4"/><text x="45.6843%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.45%)</title><rect x="45.8797%" y="613" width="0.4454%" height="15" fill="rgb(208,127,28)" fg:x="206" fg:w="2"/><text x="46.1297%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.45%)</title><rect x="45.8797%" y="597" width="0.4454%" height="15" fill="rgb(224,137,22)" fg:x="206" fg:w="2"/><text x="46.1297%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.45%)</title><rect x="45.8797%" y="581" width="0.4454%" height="15" fill="rgb(254,70,32)" fg:x="206" fg:w="2"/><text x="46.1297%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.45%)</title><rect x="45.8797%" y="565" width="0.4454%" height="15" fill="rgb(229,75,37)" fg:x="206" fg:w="2"/><text x="46.1297%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (1 samples, 0.22%)</title><rect x="46.3252%" y="613" width="0.2227%" height="15" fill="rgb(252,64,23)" fg:x="208" fg:w="1"/><text x="46.5752%" y="623.50"></text></g><g><title>simsearch::SimSearch&lt;Id&gt;::search_tokens::{{closure}} (1 samples, 0.22%)</title><rect x="46.3252%" y="597" width="0.2227%" height="15" fill="rgb(232,162,48)" fg:x="208" fg:w="1"/><text x="46.5752%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::partial_cmp (1 samples, 0.22%)</title><rect x="46.3252%" y="581" width="0.2227%" height="15" fill="rgb(246,160,12)" fg:x="208" fg:w="1"/><text x="46.5752%" y="591.50"></text></g><g><title>alloc::slice::insert_head (2 samples, 0.45%)</title><rect x="46.3252%" y="629" width="0.4454%" height="15" fill="rgb(247,166,0)" fg:x="208" fg:w="2"/><text x="46.5752%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.22%)</title><rect x="46.5479%" y="613" width="0.2227%" height="15" fill="rgb(249,219,21)" fg:x="209" fg:w="1"/><text x="46.7979%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (3 samples, 0.67%)</title><rect x="46.3252%" y="661" width="0.6682%" height="15" fill="rgb(205,209,3)" fg:x="208" fg:w="3"/><text x="46.5752%" y="671.50"></text></g><g><title>alloc::slice::merge_sort (3 samples, 0.67%)</title><rect x="46.3252%" y="645" width="0.6682%" height="15" fill="rgb(243,44,1)" fg:x="208" fg:w="3"/><text x="46.5752%" y="655.50"></text></g><g><title>alloc::slice::merge (1 samples, 0.22%)</title><rect x="46.7706%" y="629" width="0.2227%" height="15" fill="rgb(206,159,16)" fg:x="210" fg:w="1"/><text x="47.0206%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.22%)</title><rect x="46.7706%" y="613" width="0.2227%" height="15" fill="rgb(244,77,30)" fg:x="210" fg:w="1"/><text x="47.0206%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.22%)</title><rect x="46.9933%" y="453" width="0.2227%" height="15" fill="rgb(218,69,12)" fg:x="211" fg:w="1"/><text x="47.2433%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.22%)</title><rect x="46.9933%" y="437" width="0.2227%" height="15" fill="rgb(212,87,7)" fg:x="211" fg:w="1"/><text x="47.2433%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 1.11%)</title><rect x="46.9933%" y="661" width="1.1136%" height="15" fill="rgb(245,114,25)" fg:x="211" fg:w="5"/><text x="47.2433%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 1.11%)</title><rect x="46.9933%" y="645" width="1.1136%" height="15" fill="rgb(210,61,42)" fg:x="211" fg:w="5"/><text x="47.2433%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 1.11%)</title><rect x="46.9933%" y="629" width="1.1136%" height="15" fill="rgb(211,52,33)" fg:x="211" fg:w="5"/><text x="47.2433%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 1.11%)</title><rect x="46.9933%" y="613" width="1.1136%" height="15" fill="rgb(234,58,33)" fg:x="211" fg:w="5"/><text x="47.2433%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 1.11%)</title><rect x="46.9933%" y="597" width="1.1136%" height="15" fill="rgb(220,115,36)" fg:x="211" fg:w="5"/><text x="47.2433%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 1.11%)</title><rect x="46.9933%" y="581" width="1.1136%" height="15" fill="rgb(243,153,54)" fg:x="211" fg:w="5"/><text x="47.2433%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 1.11%)</title><rect x="46.9933%" y="565" width="1.1136%" height="15" fill="rgb(251,47,18)" fg:x="211" fg:w="5"/><text x="47.2433%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 1.11%)</title><rect x="46.9933%" y="549" width="1.1136%" height="15" fill="rgb(242,102,42)" fg:x="211" fg:w="5"/><text x="47.2433%" y="559.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (5 samples, 1.11%)</title><rect x="46.9933%" y="533" width="1.1136%" height="15" fill="rgb(234,31,38)" fg:x="211" fg:w="5"/><text x="47.2433%" y="543.50"></text></g><g><title>simsearch::SimSearch&lt;Id&gt;::search_tokens::{{closure}} (5 samples, 1.11%)</title><rect x="46.9933%" y="517" width="1.1136%" height="15" fill="rgb(221,117,51)" fg:x="211" fg:w="5"/><text x="47.2433%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 1.11%)</title><rect x="46.9933%" y="501" width="1.1136%" height="15" fill="rgb(212,20,18)" fg:x="211" fg:w="5"/><text x="47.2433%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 1.11%)</title><rect x="46.9933%" y="485" width="1.1136%" height="15" fill="rgb(245,133,36)" fg:x="211" fg:w="5"/><text x="47.2433%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 1.11%)</title><rect x="46.9933%" y="469" width="1.1136%" height="15" fill="rgb(212,6,19)" fg:x="211" fg:w="5"/><text x="47.2433%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 0.89%)</title><rect x="47.2160%" y="453" width="0.8909%" height="15" fill="rgb(218,1,36)" fg:x="212" fg:w="4"/><text x="47.4660%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.89%)</title><rect x="47.2160%" y="437" width="0.8909%" height="15" fill="rgb(246,84,54)" fg:x="212" fg:w="4"/><text x="47.4660%" y="447.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.22%)</title><rect x="48.1069%" y="565" width="0.2227%" height="15" fill="rgb(242,110,6)" fg:x="216" fg:w="1"/><text x="48.3569%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.22%)</title><rect x="48.1069%" y="549" width="0.2227%" height="15" fill="rgb(214,47,5)" fg:x="216" fg:w="1"/><text x="48.3569%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2 samples, 0.45%)</title><rect x="48.1069%" y="629" width="0.4454%" height="15" fill="rgb(218,159,25)" fg:x="216" fg:w="2"/><text x="48.3569%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.45%)</title><rect x="48.1069%" y="613" width="0.4454%" height="15" fill="rgb(215,211,28)" fg:x="216" fg:w="2"/><text x="48.3569%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.45%)</title><rect x="48.1069%" y="597" width="0.4454%" height="15" fill="rgb(238,59,32)" fg:x="216" fg:w="2"/><text x="48.3569%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (2 samples, 0.45%)</title><rect x="48.1069%" y="581" width="0.4454%" height="15" fill="rgb(226,82,3)" fg:x="216" fg:w="2"/><text x="48.3569%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.22%)</title><rect x="48.3296%" y="565" width="0.2227%" height="15" fill="rgb(240,164,32)" fg:x="217" fg:w="1"/><text x="48.5796%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.22%)</title><rect x="48.3296%" y="549" width="0.2227%" height="15" fill="rgb(232,46,7)" fg:x="217" fg:w="1"/><text x="48.5796%" y="559.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.22%)</title><rect x="48.5523%" y="629" width="0.2227%" height="15" fill="rgb(229,129,53)" fg:x="218" fg:w="1"/><text x="48.8023%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.22%)</title><rect x="48.5523%" y="613" width="0.2227%" height="15" fill="rgb(234,188,29)" fg:x="218" fg:w="1"/><text x="48.8023%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.22%)</title><rect x="48.5523%" y="597" width="0.2227%" height="15" fill="rgb(246,141,4)" fg:x="218" fg:w="1"/><text x="48.8023%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.22%)</title><rect x="48.5523%" y="581" width="0.2227%" height="15" fill="rgb(229,23,39)" fg:x="218" fg:w="1"/><text x="48.8023%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.22%)</title><rect x="48.5523%" y="565" width="0.2227%" height="15" fill="rgb(206,12,3)" fg:x="218" fg:w="1"/><text x="48.8023%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.22%)</title><rect x="48.5523%" y="549" width="0.2227%" height="15" fill="rgb(252,226,20)" fg:x="218" fg:w="1"/><text x="48.8023%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.89%)</title><rect x="48.1069%" y="661" width="0.8909%" height="15" fill="rgb(216,123,35)" fg:x="216" fg:w="4"/><text x="48.3569%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.89%)</title><rect x="48.1069%" y="645" width="0.8909%" height="15" fill="rgb(212,68,40)" fg:x="216" fg:w="4"/><text x="48.3569%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.22%)</title><rect x="48.7751%" y="629" width="0.2227%" height="15" fill="rgb(254,125,32)" fg:x="219" fg:w="1"/><text x="49.0251%" y="639.50"></text></g><g><title>&lt;&amp;strsim::StringWrapper as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.45%)</title><rect x="59.2428%" y="613" width="0.4454%" height="15" fill="rgb(253,97,22)" fg:x="266" fg:w="2"/><text x="59.4928%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 1.56%)</title><rect x="59.6882%" y="613" width="1.5590%" height="15" fill="rgb(241,101,14)" fg:x="268" fg:w="7"/><text x="59.9382%" y="623.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 1.56%)</title><rect x="59.6882%" y="597" width="1.5590%" height="15" fill="rgb(238,103,29)" fg:x="268" fg:w="7"/><text x="59.9382%" y="607.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 1.56%)</title><rect x="59.6882%" y="581" width="1.5590%" height="15" fill="rgb(233,195,47)" fg:x="268" fg:w="7"/><text x="59.9382%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 9.58%)</title><rect x="61.2472%" y="613" width="9.5768%" height="15" fill="rgb(246,218,30)" fg:x="275" fg:w="43"/><text x="61.4972%" y="623.50">&lt;core::iter::a..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 9.13%)</title><rect x="61.6927%" y="597" width="9.1314%" height="15" fill="rgb(219,145,47)" fg:x="277" fg:w="41"/><text x="61.9427%" y="607.50">&lt;core::str::i..</text></g><g><title>core::str::validations::next_code_point (41 samples, 9.13%)</title><rect x="61.6927%" y="581" width="9.1314%" height="15" fill="rgb(243,12,26)" fg:x="277" fg:w="41"/><text x="61.9427%" y="591.50">core::str::va..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 2.45%)</title><rect x="68.3742%" y="565" width="2.4499%" height="15" fill="rgb(214,87,16)" fg:x="307" fg:w="11"/><text x="68.6242%" y="575.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 2.00%)</title><rect x="75.7238%" y="517" width="2.0045%" height="15" fill="rgb(208,99,42)" fg:x="340" fg:w="9"/><text x="75.9738%" y="527.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (8 samples, 1.78%)</title><rect x="77.7283%" y="501" width="1.7817%" height="15" fill="rgb(253,99,2)" fg:x="349" fg:w="8"/><text x="77.9783%" y="511.50">&lt;..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count::{{closure}} (1 samples, 0.22%)</title><rect x="79.2873%" y="485" width="0.2227%" height="15" fill="rgb(220,168,23)" fg:x="356" fg:w="1"/><text x="79.5373%" y="495.50"></text></g><g><title>core::str::validations::utf8_is_cont_byte (1 samples, 0.22%)</title><rect x="79.2873%" y="469" width="0.2227%" height="15" fill="rgb(242,38,24)" fg:x="356" fg:w="1"/><text x="79.5373%" y="479.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (42 samples, 9.35%)</title><rect x="70.8241%" y="613" width="9.3541%" height="15" fill="rgb(225,182,9)" fg:x="318" fg:w="42"/><text x="71.0741%" y="623.50">&lt;core::str::i..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (42 samples, 9.35%)</title><rect x="70.8241%" y="597" width="9.3541%" height="15" fill="rgb(243,178,37)" fg:x="318" fg:w="42"/><text x="71.0741%" y="607.50">&lt;core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (42 samples, 9.35%)</title><rect x="70.8241%" y="581" width="9.3541%" height="15" fill="rgb(232,139,19)" fg:x="318" fg:w="42"/><text x="71.0741%" y="591.50">core::iter::t..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (42 samples, 9.35%)</title><rect x="70.8241%" y="565" width="9.3541%" height="15" fill="rgb(225,201,24)" fg:x="318" fg:w="42"/><text x="71.0741%" y="575.50">&lt;usize as cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (42 samples, 9.35%)</title><rect x="70.8241%" y="549" width="9.3541%" height="15" fill="rgb(221,47,46)" fg:x="318" fg:w="42"/><text x="71.0741%" y="559.50">&lt;core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (42 samples, 9.35%)</title><rect x="70.8241%" y="533" width="9.3541%" height="15" fill="rgb(249,23,13)" fg:x="318" fg:w="42"/><text x="71.0741%" y="543.50">core::iter::t..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (11 samples, 2.45%)</title><rect x="77.7283%" y="517" width="2.4499%" height="15" fill="rgb(219,9,5)" fg:x="349" fg:w="11"/><text x="77.9783%" y="527.50">co..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (3 samples, 0.67%)</title><rect x="79.5100%" y="501" width="0.6682%" height="15" fill="rgb(254,171,16)" fg:x="357" fg:w="3"/><text x="79.7600%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.89%)</title><rect x="80.1782%" y="613" width="0.8909%" height="15" fill="rgb(230,171,20)" fg:x="360" fg:w="4"/><text x="80.4282%" y="623.50"></text></g><g><title>core::ptr::write (1 samples, 0.22%)</title><rect x="80.8463%" y="597" width="0.2227%" height="15" fill="rgb(210,71,41)" fg:x="363" fg:w="1"/><text x="81.0963%" y="607.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.89%)</title><rect x="81.5145%" y="501" width="0.8909%" height="15" fill="rgb(206,173,20)" fg:x="366" fg:w="4"/><text x="81.7645%" y="511.50"></text></g><g><title>checked_request2size (2 samples, 0.45%)</title><rect x="81.9599%" y="485" width="0.4454%" height="15" fill="rgb(233,88,34)" fg:x="368" fg:w="2"/><text x="82.2099%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.22%)</title><rect x="82.4053%" y="501" width="0.2227%" height="15" fill="rgb(223,209,46)" fg:x="370" fg:w="1"/><text x="82.6553%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 1.78%)</title><rect x="81.0690%" y="613" width="1.7817%" height="15" fill="rgb(250,43,18)" fg:x="364" fg:w="8"/><text x="81.3190%" y="623.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 1.78%)</title><rect x="81.0690%" y="597" width="1.7817%" height="15" fill="rgb(208,13,10)" fg:x="364" fg:w="8"/><text x="81.3190%" y="607.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 1.56%)</title><rect x="81.2918%" y="581" width="1.5590%" height="15" fill="rgb(212,200,36)" fg:x="365" fg:w="7"/><text x="81.5418%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 1.56%)</title><rect x="81.2918%" y="565" width="1.5590%" height="15" fill="rgb(225,90,30)" fg:x="365" fg:w="7"/><text x="81.5418%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 1.56%)</title><rect x="81.2918%" y="549" width="1.5590%" height="15" fill="rgb(236,182,39)" fg:x="365" fg:w="7"/><text x="81.5418%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 1.56%)</title><rect x="81.2918%" y="533" width="1.5590%" height="15" fill="rgb(212,144,35)" fg:x="365" fg:w="7"/><text x="81.5418%" y="543.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 1.34%)</title><rect x="81.5145%" y="517" width="1.3363%" height="15" fill="rgb(228,63,44)" fg:x="366" fg:w="6"/><text x="81.7645%" y="527.50"></text></g><g><title>__rust_alloc (1 samples, 0.22%)</title><rect x="82.6281%" y="501" width="0.2227%" height="15" fill="rgb(228,109,6)" fg:x="371" fg:w="1"/><text x="82.8781%" y="511.50"></text></g><g><title>core::cmp::max (1 samples, 0.22%)</title><rect x="82.8508%" y="613" width="0.2227%" height="15" fill="rgb(238,117,24)" fg:x="372" fg:w="1"/><text x="83.1008%" y="623.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.22%)</title><rect x="82.8508%" y="597" width="0.2227%" height="15" fill="rgb(242,26,26)" fg:x="372" fg:w="1"/><text x="83.1008%" y="607.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.22%)</title><rect x="82.8508%" y="581" width="0.2227%" height="15" fill="rgb(221,92,48)" fg:x="372" fg:w="1"/><text x="83.1008%" y="591.50"></text></g><g><title>core::cmp::min (6 samples, 1.34%)</title><rect x="83.0735%" y="613" width="1.3363%" height="15" fill="rgb(209,209,32)" fg:x="373" fg:w="6"/><text x="83.3235%" y="623.50"></text></g><g><title>core::cmp::Ord::min (6 samples, 1.34%)</title><rect x="83.0735%" y="597" width="1.3363%" height="15" fill="rgb(221,70,22)" fg:x="373" fg:w="6"/><text x="83.3235%" y="607.50"></text></g><g><title>core::cmp::min_by (6 samples, 1.34%)</title><rect x="83.0735%" y="581" width="1.3363%" height="15" fill="rgb(248,145,5)" fg:x="373" fg:w="6"/><text x="83.3235%" y="591.50"></text></g><g><title>__GI___libc_free (5 samples, 1.11%)</title><rect x="84.4098%" y="533" width="1.1136%" height="15" fill="rgb(226,116,26)" fg:x="379" fg:w="5"/><text x="84.6598%" y="543.50"></text></g><g><title>__rust_dealloc (3 samples, 0.67%)</title><rect x="85.5234%" y="533" width="0.6682%" height="15" fill="rgb(244,5,17)" fg:x="384" fg:w="3"/><text x="85.7734%" y="543.50"></text></g><g><title>simsearch::SimSearch&lt;Id&gt;::search (191 samples, 42.54%)</title><rect x="45.2116%" y="693" width="42.5390%" height="15" fill="rgb(252,159,33)" fg:x="203" fg:w="191"/><text x="45.4616%" y="703.50">simsearch::SimSearch&lt;Id&gt;::search</text></g><g><title>simsearch::SimSearch&lt;Id&gt;::search_tokens (191 samples, 42.54%)</title><rect x="45.2116%" y="677" width="42.5390%" height="15" fill="rgb(206,71,0)" fg:x="203" fg:w="191"/><text x="45.4616%" y="687.50">simsearch::SimSearch&lt;Id&gt;::search_tokens</text></g><g><title>strsim::jaro_winkler (174 samples, 38.75%)</title><rect x="48.9978%" y="661" width="38.7528%" height="15" fill="rgb(233,118,54)" fg:x="220" fg:w="174"/><text x="49.2478%" y="671.50">strsim::jaro_winkler</text></g><g><title>strsim::generic_jaro_winkler (173 samples, 38.53%)</title><rect x="49.2205%" y="645" width="38.5301%" height="15" fill="rgb(234,83,48)" fg:x="221" fg:w="173"/><text x="49.4705%" y="655.50">strsim::generic_jaro_winkler</text></g><g><title>strsim::generic_jaro (171 samples, 38.08%)</title><rect x="49.6659%" y="629" width="38.0846%" height="15" fill="rgb(228,3,54)" fg:x="223" fg:w="171"/><text x="49.9159%" y="639.50">strsim::generic_jaro</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (15 samples, 3.34%)</title><rect x="84.4098%" y="613" width="3.3408%" height="15" fill="rgb(226,155,13)" fg:x="379" fg:w="15"/><text x="84.6598%" y="623.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (15 samples, 3.34%)</title><rect x="84.4098%" y="597" width="3.3408%" height="15" fill="rgb(241,28,37)" fg:x="379" fg:w="15"/><text x="84.6598%" y="607.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 3.34%)</title><rect x="84.4098%" y="581" width="3.3408%" height="15" fill="rgb(233,93,10)" fg:x="379" fg:w="15"/><text x="84.6598%" y="591.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 3.34%)</title><rect x="84.4098%" y="565" width="3.3408%" height="15" fill="rgb(225,113,19)" fg:x="379" fg:w="15"/><text x="84.6598%" y="575.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (15 samples, 3.34%)</title><rect x="84.4098%" y="549" width="3.3408%" height="15" fill="rgb(241,2,18)" fg:x="379" fg:w="15"/><text x="84.6598%" y="559.50">all..</text></g><g><title>_int_free (7 samples, 1.56%)</title><rect x="86.1915%" y="533" width="1.5590%" height="15" fill="rgb(228,207,21)" fg:x="387" fg:w="7"/><text x="86.4415%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.22%)</title><rect x="87.9733%" y="373" width="0.2227%" height="15" fill="rgb(213,211,35)" fg:x="395" fg:w="1"/><text x="88.2233%" y="383.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (4 samples, 0.89%)</title><rect x="87.7506%" y="469" width="0.8909%" height="15" fill="rgb(209,83,10)" fg:x="394" fg:w="4"/><text x="88.0006%" y="479.50"></text></g><g><title>core::fmt::Write::write_char (3 samples, 0.67%)</title><rect x="87.9733%" y="453" width="0.6682%" height="15" fill="rgb(209,164,1)" fg:x="395" fg:w="3"/><text x="88.2233%" y="463.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.67%)</title><rect x="87.9733%" y="437" width="0.6682%" height="15" fill="rgb(213,184,43)" fg:x="395" fg:w="3"/><text x="88.2233%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.67%)</title><rect x="87.9733%" y="421" width="0.6682%" height="15" fill="rgb(231,61,34)" fg:x="395" fg:w="3"/><text x="88.2233%" y="431.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.67%)</title><rect x="87.9733%" y="405" width="0.6682%" height="15" fill="rgb(235,75,3)" fg:x="395" fg:w="3"/><text x="88.2233%" y="415.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.67%)</title><rect x="87.9733%" y="389" width="0.6682%" height="15" fill="rgb(220,106,47)" fg:x="395" fg:w="3"/><text x="88.2233%" y="399.50"></text></g><g><title>std::sys_common::memchr::memrchr (2 samples, 0.45%)</title><rect x="88.1960%" y="373" width="0.4454%" height="15" fill="rgb(210,196,33)" fg:x="396" fg:w="2"/><text x="88.4460%" y="383.50"></text></g><g><title>std::sys::unix::memchr::memrchr (2 samples, 0.45%)</title><rect x="88.1960%" y="357" width="0.4454%" height="15" fill="rgb(229,154,42)" fg:x="396" fg:w="2"/><text x="88.4460%" y="367.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.45%)</title><rect x="88.1960%" y="341" width="0.4454%" height="15" fill="rgb(228,114,26)" fg:x="396" fg:w="2"/><text x="88.4460%" y="351.50"></text></g><g><title>__memrchr_avx2 (2 samples, 0.45%)</title><rect x="88.1960%" y="325" width="0.4454%" height="15" fill="rgb(208,144,1)" fg:x="396" fg:w="2"/><text x="88.4460%" y="335.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.89%)</title><rect x="88.6414%" y="469" width="0.8909%" height="15" fill="rgb(239,112,37)" fg:x="398" fg:w="4"/><text x="88.8914%" y="479.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.89%)</title><rect x="88.6414%" y="453" width="0.8909%" height="15" fill="rgb(210,96,50)" fg:x="398" fg:w="4"/><text x="88.8914%" y="463.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.89%)</title><rect x="88.6414%" y="437" width="0.8909%" height="15" fill="rgb(222,178,2)" fg:x="398" fg:w="4"/><text x="88.8914%" y="447.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (15 samples, 3.34%)</title><rect x="90.6459%" y="453" width="3.3408%" height="15" fill="rgb(226,74,18)" fg:x="407" fg:w="15"/><text x="90.8959%" y="463.50">cor..</text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (15 samples, 3.34%)</title><rect x="90.6459%" y="437" width="3.3408%" height="15" fill="rgb(225,67,54)" fg:x="407" fg:w="15"/><text x="90.8959%" y="447.50">cor..</text></g><g><title>core::unicode::unicode_data::skip_search (12 samples, 2.67%)</title><rect x="91.3140%" y="421" width="2.6726%" height="15" fill="rgb(251,92,32)" fg:x="410" fg:w="12"/><text x="91.5640%" y="431.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (9 samples, 2.00%)</title><rect x="91.9822%" y="405" width="2.0045%" height="15" fill="rgb(228,149,22)" fg:x="413" fg:w="9"/><text x="92.2322%" y="415.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (9 samples, 2.00%)</title><rect x="91.9822%" y="389" width="2.0045%" height="15" fill="rgb(243,54,13)" fg:x="413" fg:w="9"/><text x="92.2322%" y="399.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (2 samples, 0.45%)</title><rect x="93.5412%" y="373" width="0.4454%" height="15" fill="rgb(243,180,28)" fg:x="420" fg:w="2"/><text x="93.7912%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (2 samples, 0.45%)</title><rect x="93.5412%" y="357" width="0.4454%" height="15" fill="rgb(208,167,24)" fg:x="420" fg:w="2"/><text x="93.7912%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.45%)</title><rect x="95.5457%" y="421" width="0.4454%" height="15" fill="rgb(245,73,45)" fg:x="429" fg:w="2"/><text x="95.7957%" y="431.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (30 samples, 6.68%)</title><rect x="89.5323%" y="469" width="6.6815%" height="15" fill="rgb(237,203,48)" fg:x="402" fg:w="30"/><text x="89.7823%" y="479.50">core::cha..</text></g><g><title>core::unicode::printable::is_printable (10 samples, 2.23%)</title><rect x="93.9866%" y="453" width="2.2272%" height="15" fill="rgb(211,197,16)" fg:x="422" fg:w="10"/><text x="94.2366%" y="463.50">c..</text></g><g><title>core::unicode::printable::check (9 samples, 2.00%)</title><rect x="94.2094%" y="437" width="2.0045%" height="15" fill="rgb(243,99,51)" fg:x="423" fg:w="9"/><text x="94.4594%" y="447.50">c..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.22%)</title><rect x="95.9911%" y="421" width="0.2227%" height="15" fill="rgb(215,123,29)" fg:x="431" fg:w="1"/><text x="96.2411%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.22%)</title><rect x="95.9911%" y="405" width="0.2227%" height="15" fill="rgb(239,186,37)" fg:x="431" fg:w="1"/><text x="96.2411%" y="415.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (53 samples, 11.80%)</title><rect x="87.7506%" y="485" width="11.8040%" height="15" fill="rgb(252,136,39)" fg:x="394" fg:w="53"/><text x="88.0006%" y="495.50">&lt;str as core::fmt:..</text></g><g><title>core::fmt::Formatter::write_str (15 samples, 3.34%)</title><rect x="96.2138%" y="469" width="3.3408%" height="15" fill="rgb(223,213,32)" fg:x="432" fg:w="15"/><text x="96.4638%" y="479.50">cor..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (15 samples, 3.34%)</title><rect x="96.2138%" y="453" width="3.3408%" height="15" fill="rgb(233,115,5)" fg:x="432" fg:w="15"/><text x="96.4638%" y="463.50">&lt;st..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (14 samples, 3.12%)</title><rect x="96.4365%" y="437" width="3.1180%" height="15" fill="rgb(207,226,44)" fg:x="433" fg:w="14"/><text x="96.6865%" y="447.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (14 samples, 3.12%)</title><rect x="96.4365%" y="421" width="3.1180%" height="15" fill="rgb(208,126,0)" fg:x="433" fg:w="14"/><text x="96.6865%" y="431.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (14 samples, 3.12%)</title><rect x="96.4365%" y="405" width="3.1180%" height="15" fill="rgb(244,66,21)" fg:x="433" fg:w="14"/><text x="96.6865%" y="415.50">&lt;st..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (14 samples, 3.12%)</title><rect x="96.4365%" y="389" width="3.1180%" height="15" fill="rgb(222,97,12)" fg:x="433" fg:w="14"/><text x="96.6865%" y="399.50">std..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (14 samples, 3.12%)</title><rect x="96.4365%" y="373" width="3.1180%" height="15" fill="rgb(219,213,19)" fg:x="433" fg:w="14"/><text x="96.6865%" y="383.50">std..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (14 samples, 3.12%)</title><rect x="96.4365%" y="357" width="3.1180%" height="15" fill="rgb(252,169,30)" fg:x="433" fg:w="14"/><text x="96.6865%" y="367.50">&lt;st..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (14 samples, 3.12%)</title><rect x="96.4365%" y="341" width="3.1180%" height="15" fill="rgb(206,32,51)" fg:x="433" fg:w="14"/><text x="96.6865%" y="351.50">&lt;st..</text></g><g><title>std::sys::unix::fd::FileDesc::write (14 samples, 3.12%)</title><rect x="96.4365%" y="325" width="3.1180%" height="15" fill="rgb(250,172,42)" fg:x="433" fg:w="14"/><text x="96.6865%" y="335.50">std..</text></g><g><title>__libc_write (14 samples, 3.12%)</title><rect x="96.4365%" y="309" width="3.1180%" height="15" fill="rgb(209,34,43)" fg:x="433" fg:w="14"/><text x="96.6865%" y="319.50">__l..</text></g><g><title>[unknown] (14 samples, 3.12%)</title><rect x="96.4365%" y="293" width="3.1180%" height="15" fill="rgb(223,11,35)" fg:x="433" fg:w="14"/><text x="96.6865%" y="303.50">[un..</text></g><g><title>[unknown] (14 samples, 3.12%)</title><rect x="96.4365%" y="277" width="3.1180%" height="15" fill="rgb(251,219,26)" fg:x="433" fg:w="14"/><text x="96.6865%" y="287.50">[un..</text></g><g><title>[unknown] (14 samples, 3.12%)</title><rect x="96.4365%" y="261" width="3.1180%" height="15" fill="rgb(231,119,3)" fg:x="433" fg:w="14"/><text x="96.6865%" y="271.50">[un..</text></g><g><title>[unknown] (14 samples, 3.12%)</title><rect x="96.4365%" y="245" width="3.1180%" height="15" fill="rgb(216,97,11)" fg:x="433" fg:w="14"/><text x="96.6865%" y="255.50">[un..</text></g><g><title>[unknown] (14 samples, 3.12%)</title><rect x="96.4365%" y="229" width="3.1180%" height="15" fill="rgb(223,59,9)" fg:x="433" fg:w="14"/><text x="96.6865%" y="239.50">[un..</text></g><g><title>[unknown] (14 samples, 3.12%)</title><rect x="96.4365%" y="213" width="3.1180%" height="15" fill="rgb(233,93,31)" fg:x="433" fg:w="14"/><text x="96.6865%" y="223.50">[un..</text></g><g><title>[unknown] (14 samples, 3.12%)</title><rect x="96.4365%" y="197" width="3.1180%" height="15" fill="rgb(239,81,33)" fg:x="433" fg:w="14"/><text x="96.6865%" y="207.50">[un..</text></g><g><title>[unknown] (14 samples, 3.12%)</title><rect x="96.4365%" y="181" width="3.1180%" height="15" fill="rgb(213,120,34)" fg:x="433" fg:w="14"/><text x="96.6865%" y="191.50">[un..</text></g><g><title>[unknown] (14 samples, 3.12%)</title><rect x="96.4365%" y="165" width="3.1180%" height="15" fill="rgb(243,49,53)" fg:x="433" fg:w="14"/><text x="96.6865%" y="175.50">[un..</text></g><g><title>[unknown] (4 samples, 0.89%)</title><rect x="98.6637%" y="149" width="0.8909%" height="15" fill="rgb(247,216,33)" fg:x="443" fg:w="4"/><text x="98.9137%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.89%)</title><rect x="98.6637%" y="133" width="0.8909%" height="15" fill="rgb(226,26,14)" fg:x="443" fg:w="4"/><text x="98.9137%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.89%)</title><rect x="98.6637%" y="117" width="0.8909%" height="15" fill="rgb(215,49,53)" fg:x="443" fg:w="4"/><text x="98.9137%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.89%)</title><rect x="98.6637%" y="101" width="0.8909%" height="15" fill="rgb(245,162,40)" fg:x="443" fg:w="4"/><text x="98.9137%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.89%)</title><rect x="98.6637%" y="85" width="0.8909%" height="15" fill="rgb(229,68,17)" fg:x="443" fg:w="4"/><text x="98.9137%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.89%)</title><rect x="98.6637%" y="69" width="0.8909%" height="15" fill="rgb(213,182,10)" fg:x="443" fg:w="4"/><text x="98.9137%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.67%)</title><rect x="98.8864%" y="53" width="0.6682%" height="15" fill="rgb(245,125,30)" fg:x="444" fg:w="3"/><text x="99.1364%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.45%)</title><rect x="99.1091%" y="37" width="0.4454%" height="15" fill="rgb(232,202,2)" fg:x="445" fg:w="2"/><text x="99.3591%" y="47.50"></text></g><g><title>__libc_start_main (440 samples, 98.00%)</title><rect x="1.7817%" y="933" width="97.9955%" height="15" fill="rgb(237,140,51)" fg:x="8" fg:w="440"/><text x="2.0317%" y="943.50">__libc_start_main</text></g><g><title>main (440 samples, 98.00%)</title><rect x="1.7817%" y="917" width="97.9955%" height="15" fill="rgb(236,157,25)" fg:x="8" fg:w="440"/><text x="2.0317%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal (440 samples, 98.00%)</title><rect x="1.7817%" y="901" width="97.9955%" height="15" fill="rgb(219,209,0)" fg:x="8" fg:w="440"/><text x="2.0317%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (440 samples, 98.00%)</title><rect x="1.7817%" y="885" width="97.9955%" height="15" fill="rgb(240,116,54)" fg:x="8" fg:w="440"/><text x="2.0317%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (440 samples, 98.00%)</title><rect x="1.7817%" y="869" width="97.9955%" height="15" fill="rgb(216,10,36)" fg:x="8" fg:w="440"/><text x="2.0317%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (440 samples, 98.00%)</title><rect x="1.7817%" y="853" width="97.9955%" height="15" fill="rgb(222,72,44)" fg:x="8" fg:w="440"/><text x="2.0317%" y="863.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (440 samples, 98.00%)</title><rect x="1.7817%" y="837" width="97.9955%" height="15" fill="rgb(232,159,9)" fg:x="8" fg:w="440"/><text x="2.0317%" y="847.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (440 samples, 98.00%)</title><rect x="1.7817%" y="821" width="97.9955%" height="15" fill="rgb(210,39,32)" fg:x="8" fg:w="440"/><text x="2.0317%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (440 samples, 98.00%)</title><rect x="1.7817%" y="805" width="97.9955%" height="15" fill="rgb(216,194,45)" fg:x="8" fg:w="440"/><text x="2.0317%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (440 samples, 98.00%)</title><rect x="1.7817%" y="789" width="97.9955%" height="15" fill="rgb(218,18,35)" fg:x="8" fg:w="440"/><text x="2.0317%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (440 samples, 98.00%)</title><rect x="1.7817%" y="773" width="97.9955%" height="15" fill="rgb(207,83,51)" fg:x="8" fg:w="440"/><text x="2.0317%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (440 samples, 98.00%)</title><rect x="1.7817%" y="757" width="97.9955%" height="15" fill="rgb(225,63,43)" fg:x="8" fg:w="440"/><text x="2.0317%" y="767.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (440 samples, 98.00%)</title><rect x="1.7817%" y="741" width="97.9955%" height="15" fill="rgb(207,57,36)" fg:x="8" fg:w="440"/><text x="2.0317%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (440 samples, 98.00%)</title><rect x="1.7817%" y="725" width="97.9955%" height="15" fill="rgb(216,99,33)" fg:x="8" fg:w="440"/><text x="2.0317%" y="735.50">core::ops::function::FnOnce::call_once</text></g><g><title>simsearch::main (440 samples, 98.00%)</title><rect x="1.7817%" y="709" width="97.9955%" height="15" fill="rgb(225,42,16)" fg:x="8" fg:w="440"/><text x="2.0317%" y="719.50">simsearch::main</text></g><g><title>std::io::stdio::_print (54 samples, 12.03%)</title><rect x="87.7506%" y="693" width="12.0267%" height="15" fill="rgb(220,201,45)" fg:x="394" fg:w="54"/><text x="88.0006%" y="703.50">std::io::stdio::_p..</text></g><g><title>std::io::stdio::print_to (54 samples, 12.03%)</title><rect x="87.7506%" y="677" width="12.0267%" height="15" fill="rgb(225,33,4)" fg:x="394" fg:w="54"/><text x="88.0006%" y="687.50">std::io::stdio::pr..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (54 samples, 12.03%)</title><rect x="87.7506%" y="661" width="12.0267%" height="15" fill="rgb(224,33,50)" fg:x="394" fg:w="54"/><text x="88.0006%" y="671.50">&lt;std::io::stdio::S..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (54 samples, 12.03%)</title><rect x="87.7506%" y="645" width="12.0267%" height="15" fill="rgb(246,198,51)" fg:x="394" fg:w="54"/><text x="88.0006%" y="655.50">&lt;&amp;std::io::stdio::..</text></g><g><title>std::io::Write::write_fmt (54 samples, 12.03%)</title><rect x="87.7506%" y="629" width="12.0267%" height="15" fill="rgb(205,22,4)" fg:x="394" fg:w="54"/><text x="88.0006%" y="639.50">std::io::Write::wr..</text></g><g><title>core::fmt::write (54 samples, 12.03%)</title><rect x="87.7506%" y="613" width="12.0267%" height="15" fill="rgb(206,3,8)" fg:x="394" fg:w="54"/><text x="88.0006%" y="623.50">core::fmt::write</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::fmt::Debug&gt;::fmt (54 samples, 12.03%)</title><rect x="87.7506%" y="597" width="12.0267%" height="15" fill="rgb(251,23,15)" fg:x="394" fg:w="54"/><text x="88.0006%" y="607.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;[T] as core::fmt::Debug&gt;::fmt (54 samples, 12.03%)</title><rect x="87.7506%" y="581" width="12.0267%" height="15" fill="rgb(252,88,28)" fg:x="394" fg:w="54"/><text x="88.0006%" y="591.50">&lt;[T] as core::fmt:..</text></g><g><title>core::fmt::builders::DebugList::entries (54 samples, 12.03%)</title><rect x="87.7506%" y="565" width="12.0267%" height="15" fill="rgb(212,127,14)" fg:x="394" fg:w="54"/><text x="88.0006%" y="575.50">core::fmt::builder..</text></g><g><title>core::fmt::builders::DebugSet::entry (54 samples, 12.03%)</title><rect x="87.7506%" y="549" width="12.0267%" height="15" fill="rgb(247,145,37)" fg:x="394" fg:w="54"/><text x="88.0006%" y="559.50">core::fmt::builder..</text></g><g><title>core::fmt::builders::DebugInner::entry (54 samples, 12.03%)</title><rect x="87.7506%" y="533" width="12.0267%" height="15" fill="rgb(209,117,53)" fg:x="394" fg:w="54"/><text x="88.0006%" y="543.50">core::fmt::builder..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (54 samples, 12.03%)</title><rect x="87.7506%" y="517" width="12.0267%" height="15" fill="rgb(212,90,42)" fg:x="394" fg:w="54"/><text x="88.0006%" y="527.50">core::result::Resu..</text></g><g><title>core::fmt::builders::DebugInner::entry::{{closure}} (54 samples, 12.03%)</title><rect x="87.7506%" y="501" width="12.0267%" height="15" fill="rgb(218,164,37)" fg:x="394" fg:w="54"/><text x="88.0006%" y="511.50">core::fmt::builder..</text></g><g><title>core::fmt::Write::write_char (1 samples, 0.22%)</title><rect x="99.5546%" y="485" width="0.2227%" height="15" fill="rgb(246,65,34)" fg:x="447" fg:w="1"/><text x="99.8046%" y="495.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.22%)</title><rect x="99.5546%" y="469" width="0.2227%" height="15" fill="rgb(231,100,33)" fg:x="447" fg:w="1"/><text x="99.8046%" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.22%)</title><rect x="99.5546%" y="453" width="0.2227%" height="15" fill="rgb(228,126,14)" fg:x="447" fg:w="1"/><text x="99.8046%" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.22%)</title><rect x="99.5546%" y="437" width="0.2227%" height="15" fill="rgb(215,173,21)" fg:x="447" fg:w="1"/><text x="99.8046%" y="447.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.22%)</title><rect x="99.5546%" y="421" width="0.2227%" height="15" fill="rgb(210,6,40)" fg:x="447" fg:w="1"/><text x="99.8046%" y="431.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.22%)</title><rect x="99.5546%" y="405" width="0.2227%" height="15" fill="rgb(212,48,18)" fg:x="447" fg:w="1"/><text x="99.8046%" y="415.50"></text></g><g><title>all (449 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(230,214,11)" fg:x="0" fg:w="449"/><text x="0.2500%" y="991.50"></text></g><g><title>simsearch (443 samples, 98.66%)</title><rect x="1.3363%" y="965" width="98.6637%" height="15" fill="rgb(254,105,39)" fg:x="6" fg:w="443"/><text x="1.5863%" y="975.50">simsearch</text></g><g><title>_start (441 samples, 98.22%)</title><rect x="1.7817%" y="949" width="98.2183%" height="15" fill="rgb(245,158,5)" fg:x="8" fg:w="441"/><text x="2.0317%" y="959.50">_start</text></g><g><title>_dl_start (1 samples, 0.22%)</title><rect x="99.7773%" y="933" width="0.2227%" height="15" fill="rgb(249,208,11)" fg:x="448" fg:w="1"/><text x="100.0273%" y="943.50"></text></g><g><title>_dl_start_final (1 samples, 0.22%)</title><rect x="99.7773%" y="917" width="0.2227%" height="15" fill="rgb(210,39,28)" fg:x="448" fg:w="1"/><text x="100.0273%" y="927.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.22%)</title><rect x="99.7773%" y="901" width="0.2227%" height="15" fill="rgb(211,56,53)" fg:x="448" fg:w="1"/><text x="100.0273%" y="911.50"></text></g><g><title>dl_main (1 samples, 0.22%)</title><rect x="99.7773%" y="885" width="0.2227%" height="15" fill="rgb(226,201,30)" fg:x="448" fg:w="1"/><text x="100.0273%" y="895.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.22%)</title><rect x="99.7773%" y="869" width="0.2227%" height="15" fill="rgb(239,101,34)" fg:x="448" fg:w="1"/><text x="100.0273%" y="879.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.22%)</title><rect x="99.7773%" y="853" width="0.2227%" height="15" fill="rgb(226,209,5)" fg:x="448" fg:w="1"/><text x="100.0273%" y="863.50"></text></g><g><title>openaux (1 samples, 0.22%)</title><rect x="99.7773%" y="837" width="0.2227%" height="15" fill="rgb(250,105,47)" fg:x="448" fg:w="1"/><text x="100.0273%" y="847.50"></text></g><g><title>_dl_map_object (1 samples, 0.22%)</title><rect x="99.7773%" y="821" width="0.2227%" height="15" fill="rgb(230,72,3)" fg:x="448" fg:w="1"/><text x="100.0273%" y="831.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.22%)</title><rect x="99.7773%" y="805" width="0.2227%" height="15" fill="rgb(232,218,39)" fg:x="448" fg:w="1"/><text x="100.0273%" y="815.50"></text></g><g><title>_dl_map_segments (1 samples, 0.22%)</title><rect x="99.7773%" y="789" width="0.2227%" height="15" fill="rgb(248,166,6)" fg:x="448" fg:w="1"/><text x="100.0273%" y="799.50"></text></g><g><title>__mmap64 (1 samples, 0.22%)</title><rect x="99.7773%" y="773" width="0.2227%" height="15" fill="rgb(247,89,20)" fg:x="448" fg:w="1"/><text x="100.0273%" y="783.50"></text></g><g><title>__mmap64 (1 samples, 0.22%)</title><rect x="99.7773%" y="757" width="0.2227%" height="15" fill="rgb(248,130,54)" fg:x="448" fg:w="1"/><text x="100.0273%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.7773%" y="741" width="0.2227%" height="15" fill="rgb(234,196,4)" fg:x="448" fg:w="1"/><text x="100.0273%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.7773%" y="725" width="0.2227%" height="15" fill="rgb(250,143,31)" fg:x="448" fg:w="1"/><text x="100.0273%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.7773%" y="709" width="0.2227%" height="15" fill="rgb(211,110,34)" fg:x="448" fg:w="1"/><text x="100.0273%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.7773%" y="693" width="0.2227%" height="15" fill="rgb(215,124,48)" fg:x="448" fg:w="1"/><text x="100.0273%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.7773%" y="677" width="0.2227%" height="15" fill="rgb(216,46,13)" fg:x="448" fg:w="1"/><text x="100.0273%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.7773%" y="661" width="0.2227%" height="15" fill="rgb(205,184,25)" fg:x="448" fg:w="1"/><text x="100.0273%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.7773%" y="645" width="0.2227%" height="15" fill="rgb(228,1,10)" fg:x="448" fg:w="1"/><text x="100.0273%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.7773%" y="629" width="0.2227%" height="15" fill="rgb(213,116,27)" fg:x="448" fg:w="1"/><text x="100.0273%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.7773%" y="613" width="0.2227%" height="15" fill="rgb(241,95,50)" fg:x="448" fg:w="1"/><text x="100.0273%" y="623.50"></text></g></svg></svg>